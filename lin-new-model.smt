(set-logic HORN)
(declare-fun tr01 (Int Int) Bool)
(declare-fun tr12 (Int Int) Bool)
(declare-fun tr23 (Int Int) Bool)
(declare-fun tr34 (Int Int) Bool)
(declare-fun tr45 (Int Int) Bool)
(declare-fun tr56 (Int Int) Bool)
(declare-fun tr67 (Int Int) Bool)
(declare-fun tr78 (Int Int) Bool)
(declare-fun tr89 (Int Int) Bool)
(declare-fun tr910 (Int Int) Bool)
(declare-fun tr1011 (Int Int) Bool)
(assert (forall ((var0 Int) (time Int)) (! (=> (= time (- 1)) (tr01 0 time)) :weight 0)))
(assert (forall ((var0 Int) (time Int))
  (! (=> (and (tr01 var0 time) true true) (tr12 var0 (+ time 1))) :weight 0)))
(assert (forall ((var0 Int) (time Int))
  (! (=> (and (tr12 var0 time) true true) (tr23 (+ var0 1) (+ time 1)))
     :weight 0)))
(assert (forall ((var0 Int) (time Int))
  (! (=> (and (tr23 var0 time) true true) (tr34 (+ var0 1) (+ time 1)))
     :weight 0)))
(assert (forall ((var0 Int) (time Int))
  (! (=> (and (tr34 var0 time) true true) (tr45 (+ var0 1) (+ time 1)))
     :weight 0)))
(assert (forall ((var0 Int) (time Int))
  (! (=> (and (tr45 var0 time) true true) (tr56 (+ var0 1) (+ time 1)))
     :weight 0)))
(assert (forall ((var0 Int) (time Int))
  (! (=> (and (tr56 var0 time) true true) (tr67 (+ var0 1) (+ time 1)))
     :weight 0)))
(assert (forall ((var0 Int) (time Int))
  (! (=> (and (tr67 var0 time) true true) (tr78 (+ var0 1) (+ time 1)))
     :weight 0)))
(assert (forall ((var0 Int) (time Int))
  (! (=> (and (tr78 var0 time) true true) (tr89 (+ var0 1) (+ time 1)))
     :weight 0)))
(assert (forall ((var0 Int) (time Int))
  (! (=> (and (tr89 var0 time) true true) (tr910 (+ var0 1) (+ time 1)))
     :weight 0)))
(assert (forall ((var0 Int) (time Int))
  (! (=> (and (tr910 var0 time) true true) (tr1011 (+ var0 1) (+ time 1)))
     :weight 0)))
(assert (forall ((var0 Int) (time Int))
  (! (=> (tr01 var0 time)
         (and true
              (not (tr12 var0 time))
              (not (tr23 var0 time))
              (not (tr34 var0 time))
              (not (tr45 var0 time))
              (not (tr56 var0 time))
              (not (tr67 var0 time))
              (not (tr78 var0 time))
              (not (tr89 var0 time))
              (not (tr910 var0 time))
              (not (tr1011 var0 time))))
     :weight 0)))
(assert (forall ((var0 Int) (time Int))
  (! (=> (tr12 var0 time)
         (and true
              (not (tr01 var0 time))
              (not (tr23 var0 time))
              (not (tr34 var0 time))
              (not (tr45 var0 time))
              (not (tr56 var0 time))
              (not (tr67 var0 time))
              (not (tr78 var0 time))
              (not (tr89 var0 time))
              (not (tr910 var0 time))
              (not (tr1011 var0 time))))
     :weight 0)))
(assert (forall ((var0 Int) (time Int))
  (! (=> (tr23 var0 time)
         (and true
              (not (tr01 var0 time))
              (not (tr12 var0 time))
              (not (tr34 var0 time))
              (not (tr45 var0 time))
              (not (tr56 var0 time))
              (not (tr67 var0 time))
              (not (tr78 var0 time))
              (not (tr89 var0 time))
              (not (tr910 var0 time))
              (not (tr1011 var0 time))))
     :weight 0)))
(assert (forall ((var0 Int) (time Int))
  (! (=> (tr34 var0 time)
         (and true
              (not (tr01 var0 time))
              (not (tr12 var0 time))
              (not (tr23 var0 time))
              (not (tr45 var0 time))
              (not (tr56 var0 time))
              (not (tr67 var0 time))
              (not (tr78 var0 time))
              (not (tr89 var0 time))
              (not (tr910 var0 time))
              (not (tr1011 var0 time))))
     :weight 0)))
(assert (forall ((var0 Int) (time Int))
  (! (=> (tr45 var0 time)
         (and true
              (not (tr01 var0 time))
              (not (tr12 var0 time))
              (not (tr23 var0 time))
              (not (tr34 var0 time))
              (not (tr56 var0 time))
              (not (tr67 var0 time))
              (not (tr78 var0 time))
              (not (tr89 var0 time))
              (not (tr910 var0 time))
              (not (tr1011 var0 time))))
     :weight 0)))
(assert (forall ((var0 Int) (time Int))
  (! (=> (tr56 var0 time)
         (and true
              (not (tr01 var0 time))
              (not (tr12 var0 time))
              (not (tr23 var0 time))
              (not (tr34 var0 time))
              (not (tr45 var0 time))
              (not (tr67 var0 time))
              (not (tr78 var0 time))
              (not (tr89 var0 time))
              (not (tr910 var0 time))
              (not (tr1011 var0 time))))
     :weight 0)))
(assert (forall ((var0 Int) (time Int))
  (! (=> (tr67 var0 time)
         (and true
              (not (tr01 var0 time))
              (not (tr12 var0 time))
              (not (tr23 var0 time))
              (not (tr34 var0 time))
              (not (tr45 var0 time))
              (not (tr56 var0 time))
              (not (tr78 var0 time))
              (not (tr89 var0 time))
              (not (tr910 var0 time))
              (not (tr1011 var0 time))))
     :weight 0)))
(assert (forall ((var0 Int) (time Int))
  (! (=> (tr78 var0 time)
         (and true
              (not (tr01 var0 time))
              (not (tr12 var0 time))
              (not (tr23 var0 time))
              (not (tr34 var0 time))
              (not (tr45 var0 time))
              (not (tr56 var0 time))
              (not (tr67 var0 time))
              (not (tr89 var0 time))
              (not (tr910 var0 time))
              (not (tr1011 var0 time))))
     :weight 0)))
(assert (forall ((var0 Int) (time Int))
  (! (=> (tr89 var0 time)
         (and true
              (not (tr01 var0 time))
              (not (tr12 var0 time))
              (not (tr23 var0 time))
              (not (tr34 var0 time))
              (not (tr45 var0 time))
              (not (tr56 var0 time))
              (not (tr67 var0 time))
              (not (tr78 var0 time))
              (not (tr910 var0 time))
              (not (tr1011 var0 time))))
     :weight 0)))
(assert (forall ((var0 Int) (time Int))
  (! (=> (tr910 var0 time)
         (and true
              (not (tr01 var0 time))
              (not (tr12 var0 time))
              (not (tr23 var0 time))
              (not (tr34 var0 time))
              (not (tr45 var0 time))
              (not (tr56 var0 time))
              (not (tr67 var0 time))
              (not (tr78 var0 time))
              (not (tr89 var0 time))
              (not (tr1011 var0 time))))
     :weight 0)))
(assert (forall ((var0 Int) (time Int))
  (! (=> (tr1011 var0 time)
         (and true
              (not (tr01 var0 time))
              (not (tr12 var0 time))
              (not (tr23 var0 time))
              (not (tr34 var0 time))
              (not (tr45 var0 time))
              (not (tr56 var0 time))
              (not (tr67 var0 time))
              (not (tr78 var0 time))
              (not (tr89 var0 time))
              (not (tr910 var0 time))))
     :weight 0)))
(check-sat)
(get-model)

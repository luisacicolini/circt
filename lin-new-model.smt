(set-logic HORN)
(declare-fun supp (Int Int) Bool)
(declare-fun _0 (Int Int) Bool)
(declare-fun _1 (Int Int) Bool)
(declare-fun _2 (Int Int) Bool)
(declare-fun _3 (Int Int) Bool)
(declare-fun _4 (Int Int) Bool)
(declare-fun _5 (Int Int) Bool)
(declare-fun _6 (Int Int) Bool)
(declare-fun _7 (Int Int) Bool)
(declare-fun _8 (Int Int) Bool)
(declare-fun _9 (Int Int) Bool)
(declare-fun _10 (Int Int) Bool)
(assert (forall ((var0 Int) (time Int)) (! (=> (= time (- 1)) (supp 0 time)) :weight 0)))
(assert (forall ((var0 Int) (time Int))
  (! (=> (and (supp var0 time) true) (_0 var0 (+ time 1))) :weight 0)))
(assert (forall ((var0 Int) (time Int))
  (! (=> (and (_0 var0 time) true) (_1 (+ var0 1) (+ time 1))) :weight 0)))
(assert (forall ((var0 Int) (time Int))
  (! (=> (and (_1 var0 time) true) (_2 (+ var0 1) (+ time 1))) :weight 0)))
(assert (forall ((var0 Int) (time Int))
  (! (=> (and (_2 var0 time) true) (_3 (+ var0 1) (+ time 1))) :weight 0)))
(assert (forall ((var0 Int) (time Int))
  (! (=> (and (_3 var0 time) true) (_4 (+ var0 1) (+ time 1))) :weight 0)))
(assert (forall ((var0 Int) (time Int))
  (! (=> (and (_4 var0 time) true) (_5 (+ var0 1) (+ time 1))) :weight 0)))
(assert (forall ((var0 Int) (time Int))
  (! (=> (and (_5 var0 time) true) (_6 (+ var0 1) (+ time 1))) :weight 0)))
(assert (forall ((var0 Int) (time Int))
  (! (=> (and (_6 var0 time) true) (_7 (+ var0 1) (+ time 1))) :weight 0)))
(assert (forall ((var0 Int) (time Int))
  (! (=> (and (_7 var0 time) true) (_8 (+ var0 1) (+ time 1))) :weight 0)))
(assert (forall ((var0 Int) (time Int))
  (! (=> (and (_8 var0 time) true) (_9 (+ var0 1) (+ time 1))) :weight 0)))
(assert (forall ((var0 Int) (time Int))
  (! (=> (and (_9 var0 time) true) (_10 (+ var0 1) (+ time 1))) :weight 0)))
(assert (forall ((var0 Int) (time Int))
  (! (=> (supp var0 time)
         (and true
              (not (_0 var0 time))
              (not (_1 var0 time))
              (not (_2 var0 time))
              (not (_3 var0 time))
              (not (_4 var0 time))
              (not (_5 var0 time))
              (not (_6 var0 time))
              (not (_7 var0 time))
              (not (_8 var0 time))
              (not (_9 var0 time))
              (not (_10 var0 time))))
     :weight 0)))
(assert (forall ((var0 Int) (time Int))
  (! (=> (_0 var0 time)
         (and true
              (not (supp var0 time))
              (not (_1 var0 time))
              (not (_2 var0 time))
              (not (_3 var0 time))
              (not (_4 var0 time))
              (not (_5 var0 time))
              (not (_6 var0 time))
              (not (_7 var0 time))
              (not (_8 var0 time))
              (not (_9 var0 time))
              (not (_10 var0 time))))
     :weight 0)))
(assert (forall ((var0 Int) (time Int))
  (! (=> (_1 var0 time)
         (and true
              (not (supp var0 time))
              (not (_0 var0 time))
              (not (_2 var0 time))
              (not (_3 var0 time))
              (not (_4 var0 time))
              (not (_5 var0 time))
              (not (_6 var0 time))
              (not (_7 var0 time))
              (not (_8 var0 time))
              (not (_9 var0 time))
              (not (_10 var0 time))))
     :weight 0)))
(assert (forall ((var0 Int) (time Int))
  (! (=> (_2 var0 time)
         (and true
              (not (supp var0 time))
              (not (_0 var0 time))
              (not (_1 var0 time))
              (not (_3 var0 time))
              (not (_4 var0 time))
              (not (_5 var0 time))
              (not (_6 var0 time))
              (not (_7 var0 time))
              (not (_8 var0 time))
              (not (_9 var0 time))
              (not (_10 var0 time))))
     :weight 0)))
(assert (forall ((var0 Int) (time Int))
  (! (=> (_3 var0 time)
         (and true
              (not (supp var0 time))
              (not (_0 var0 time))
              (not (_1 var0 time))
              (not (_2 var0 time))
              (not (_4 var0 time))
              (not (_5 var0 time))
              (not (_6 var0 time))
              (not (_7 var0 time))
              (not (_8 var0 time))
              (not (_9 var0 time))
              (not (_10 var0 time))))
     :weight 0)))
(assert (forall ((var0 Int) (time Int))
  (! (=> (_4 var0 time)
         (and true
              (not (supp var0 time))
              (not (_0 var0 time))
              (not (_1 var0 time))
              (not (_2 var0 time))
              (not (_3 var0 time))
              (not (_5 var0 time))
              (not (_6 var0 time))
              (not (_7 var0 time))
              (not (_8 var0 time))
              (not (_9 var0 time))
              (not (_10 var0 time))))
     :weight 0)))
(assert (forall ((var0 Int) (time Int))
  (! (=> (_5 var0 time)
         (and true
              (not (supp var0 time))
              (not (_0 var0 time))
              (not (_1 var0 time))
              (not (_2 var0 time))
              (not (_3 var0 time))
              (not (_4 var0 time))
              (not (_6 var0 time))
              (not (_7 var0 time))
              (not (_8 var0 time))
              (not (_9 var0 time))
              (not (_10 var0 time))))
     :weight 0)))
(assert (forall ((var0 Int) (time Int))
  (! (=> (_6 var0 time)
         (and true
              (not (supp var0 time))
              (not (_0 var0 time))
              (not (_1 var0 time))
              (not (_2 var0 time))
              (not (_3 var0 time))
              (not (_4 var0 time))
              (not (_5 var0 time))
              (not (_7 var0 time))
              (not (_8 var0 time))
              (not (_9 var0 time))
              (not (_10 var0 time))))
     :weight 0)))
(assert (forall ((var0 Int) (time Int))
  (! (=> (_7 var0 time)
         (and true
              (not (supp var0 time))
              (not (_0 var0 time))
              (not (_1 var0 time))
              (not (_2 var0 time))
              (not (_3 var0 time))
              (not (_4 var0 time))
              (not (_5 var0 time))
              (not (_6 var0 time))
              (not (_8 var0 time))
              (not (_9 var0 time))
              (not (_10 var0 time))))
     :weight 0)))
(assert (forall ((var0 Int) (time Int))
  (! (=> (_8 var0 time)
         (and true
              (not (supp var0 time))
              (not (_0 var0 time))
              (not (_1 var0 time))
              (not (_2 var0 time))
              (not (_3 var0 time))
              (not (_4 var0 time))
              (not (_5 var0 time))
              (not (_6 var0 time))
              (not (_7 var0 time))
              (not (_9 var0 time))
              (not (_10 var0 time))))
     :weight 0)))
(assert (forall ((var0 Int) (time Int))
  (! (=> (_9 var0 time)
         (and true
              (not (supp var0 time))
              (not (_0 var0 time))
              (not (_1 var0 time))
              (not (_2 var0 time))
              (not (_3 var0 time))
              (not (_4 var0 time))
              (not (_5 var0 time))
              (not (_6 var0 time))
              (not (_7 var0 time))
              (not (_8 var0 time))
              (not (_10 var0 time))))
     :weight 0)))
(assert (forall ((var0 Int) (time Int))
  (! (=> (_10 var0 time)
         (and true
              (not (supp var0 time))
              (not (_0 var0 time))
              (not (_1 var0 time))
              (not (_2 var0 time))
              (not (_3 var0 time))
              (not (_4 var0 time))
              (not (_5 var0 time))
              (not (_6 var0 time))
              (not (_7 var0 time))
              (not (_8 var0 time))
              (not (_9 var0 time))))
     :weight 0)))
(assert (forall ((var0 Int) (time Int))
  (! (=> (_7 var0 time) (distinct time 1)) :weight 0)))
(check-sat)
(get-model)

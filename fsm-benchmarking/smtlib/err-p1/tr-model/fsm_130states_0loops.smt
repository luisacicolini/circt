(set-logic HORN)
(declare-fun tr01 (Int Int Int) Bool)
(declare-fun tr12 (Int Int Int) Bool)
(declare-fun tr13 (Int Int Int) Bool)
(declare-fun tr24 (Int Int Int) Bool)
(declare-fun tr23 (Int Int Int) Bool)
(declare-fun tr45 (Int Int Int) Bool)
(declare-fun tr43 (Int Int Int) Bool)
(declare-fun tr56 (Int Int Int) Bool)
(declare-fun tr53 (Int Int Int) Bool)
(declare-fun tr67 (Int Int Int) Bool)
(declare-fun tr63 (Int Int Int) Bool)
(declare-fun tr78 (Int Int Int) Bool)
(declare-fun tr73 (Int Int Int) Bool)
(declare-fun tr89 (Int Int Int) Bool)
(declare-fun tr83 (Int Int Int) Bool)
(declare-fun tr910 (Int Int Int) Bool)
(declare-fun tr93 (Int Int Int) Bool)
(declare-fun tr1011 (Int Int Int) Bool)
(declare-fun tr103 (Int Int Int) Bool)
(declare-fun tr1112 (Int Int Int) Bool)
(declare-fun tr113 (Int Int Int) Bool)
(declare-fun tr1213 (Int Int Int) Bool)
(declare-fun tr123 (Int Int Int) Bool)
(declare-fun tr1314 (Int Int Int) Bool)
(declare-fun tr133 (Int Int Int) Bool)
(declare-fun tr1415 (Int Int Int) Bool)
(declare-fun tr143 (Int Int Int) Bool)
(declare-fun tr1516 (Int Int Int) Bool)
(declare-fun tr153 (Int Int Int) Bool)
(declare-fun tr1617 (Int Int Int) Bool)
(declare-fun tr163 (Int Int Int) Bool)
(declare-fun tr1718 (Int Int Int) Bool)
(declare-fun tr173 (Int Int Int) Bool)
(declare-fun tr1819 (Int Int Int) Bool)
(declare-fun tr183 (Int Int Int) Bool)
(declare-fun tr1920 (Int Int Int) Bool)
(declare-fun tr193 (Int Int Int) Bool)
(declare-fun tr2021 (Int Int Int) Bool)
(declare-fun tr203 (Int Int Int) Bool)
(declare-fun tr2122 (Int Int Int) Bool)
(declare-fun tr213 (Int Int Int) Bool)
(declare-fun tr2223 (Int Int Int) Bool)
(declare-fun tr223 (Int Int Int) Bool)
(declare-fun tr2324 (Int Int Int) Bool)
(declare-fun tr233 (Int Int Int) Bool)
(declare-fun tr2425 (Int Int Int) Bool)
(declare-fun tr243 (Int Int Int) Bool)
(declare-fun tr2526 (Int Int Int) Bool)
(declare-fun tr253 (Int Int Int) Bool)
(declare-fun tr2627 (Int Int Int) Bool)
(declare-fun tr263 (Int Int Int) Bool)
(declare-fun tr2728 (Int Int Int) Bool)
(declare-fun tr273 (Int Int Int) Bool)
(declare-fun tr2829 (Int Int Int) Bool)
(declare-fun tr283 (Int Int Int) Bool)
(declare-fun tr2930 (Int Int Int) Bool)
(declare-fun tr293 (Int Int Int) Bool)
(declare-fun tr3031 (Int Int Int) Bool)
(declare-fun tr303 (Int Int Int) Bool)
(declare-fun tr3132 (Int Int Int) Bool)
(declare-fun tr313 (Int Int Int) Bool)
(declare-fun tr3233 (Int Int Int) Bool)
(declare-fun tr323 (Int Int Int) Bool)
(declare-fun tr3334 (Int Int Int) Bool)
(declare-fun tr333 (Int Int Int) Bool)
(declare-fun tr3435 (Int Int Int) Bool)
(declare-fun tr343 (Int Int Int) Bool)
(declare-fun tr3536 (Int Int Int) Bool)
(declare-fun tr353 (Int Int Int) Bool)
(declare-fun tr3637 (Int Int Int) Bool)
(declare-fun tr363 (Int Int Int) Bool)
(declare-fun tr3738 (Int Int Int) Bool)
(declare-fun tr373 (Int Int Int) Bool)
(declare-fun tr3839 (Int Int Int) Bool)
(declare-fun tr383 (Int Int Int) Bool)
(declare-fun tr3940 (Int Int Int) Bool)
(declare-fun tr393 (Int Int Int) Bool)
(declare-fun tr4041 (Int Int Int) Bool)
(declare-fun tr403 (Int Int Int) Bool)
(declare-fun tr4142 (Int Int Int) Bool)
(declare-fun tr413 (Int Int Int) Bool)
(declare-fun tr4243 (Int Int Int) Bool)
(declare-fun tr423 (Int Int Int) Bool)
(declare-fun tr4344 (Int Int Int) Bool)
(declare-fun tr433 (Int Int Int) Bool)
(declare-fun tr4445 (Int Int Int) Bool)
(declare-fun tr443 (Int Int Int) Bool)
(declare-fun tr4546 (Int Int Int) Bool)
(declare-fun tr453 (Int Int Int) Bool)
(declare-fun tr4647 (Int Int Int) Bool)
(declare-fun tr463 (Int Int Int) Bool)
(declare-fun tr4748 (Int Int Int) Bool)
(declare-fun tr473 (Int Int Int) Bool)
(declare-fun tr4849 (Int Int Int) Bool)
(declare-fun tr483 (Int Int Int) Bool)
(declare-fun tr4950 (Int Int Int) Bool)
(declare-fun tr493 (Int Int Int) Bool)
(declare-fun tr5051 (Int Int Int) Bool)
(declare-fun tr503 (Int Int Int) Bool)
(declare-fun tr5152 (Int Int Int) Bool)
(declare-fun tr513 (Int Int Int) Bool)
(declare-fun tr5253 (Int Int Int) Bool)
(declare-fun tr523 (Int Int Int) Bool)
(declare-fun tr5354 (Int Int Int) Bool)
(declare-fun tr533 (Int Int Int) Bool)
(declare-fun tr5455 (Int Int Int) Bool)
(declare-fun tr543 (Int Int Int) Bool)
(declare-fun tr5556 (Int Int Int) Bool)
(declare-fun tr553 (Int Int Int) Bool)
(declare-fun tr5657 (Int Int Int) Bool)
(declare-fun tr563 (Int Int Int) Bool)
(declare-fun tr5758 (Int Int Int) Bool)
(declare-fun tr573 (Int Int Int) Bool)
(declare-fun tr5859 (Int Int Int) Bool)
(declare-fun tr583 (Int Int Int) Bool)
(declare-fun tr5960 (Int Int Int) Bool)
(declare-fun tr593 (Int Int Int) Bool)
(declare-fun tr6061 (Int Int Int) Bool)
(declare-fun tr603 (Int Int Int) Bool)
(declare-fun tr6162 (Int Int Int) Bool)
(declare-fun tr613 (Int Int Int) Bool)
(declare-fun tr6263 (Int Int Int) Bool)
(declare-fun tr623 (Int Int Int) Bool)
(declare-fun tr6364 (Int Int Int) Bool)
(declare-fun tr633 (Int Int Int) Bool)
(declare-fun tr6465 (Int Int Int) Bool)
(declare-fun tr643 (Int Int Int) Bool)
(declare-fun tr6566 (Int Int Int) Bool)
(declare-fun tr653 (Int Int Int) Bool)
(declare-fun tr6667 (Int Int Int) Bool)
(declare-fun tr663 (Int Int Int) Bool)
(declare-fun tr6768 (Int Int Int) Bool)
(declare-fun tr673 (Int Int Int) Bool)
(declare-fun tr6869 (Int Int Int) Bool)
(declare-fun tr683 (Int Int Int) Bool)
(declare-fun tr6970 (Int Int Int) Bool)
(declare-fun tr693 (Int Int Int) Bool)
(declare-fun tr7071 (Int Int Int) Bool)
(declare-fun tr703 (Int Int Int) Bool)
(declare-fun tr7172 (Int Int Int) Bool)
(declare-fun tr713 (Int Int Int) Bool)
(declare-fun tr7273 (Int Int Int) Bool)
(declare-fun tr723 (Int Int Int) Bool)
(declare-fun tr7374 (Int Int Int) Bool)
(declare-fun tr733 (Int Int Int) Bool)
(declare-fun tr7475 (Int Int Int) Bool)
(declare-fun tr743 (Int Int Int) Bool)
(declare-fun tr7576 (Int Int Int) Bool)
(declare-fun tr753 (Int Int Int) Bool)
(declare-fun tr7677 (Int Int Int) Bool)
(declare-fun tr763 (Int Int Int) Bool)
(declare-fun tr7778 (Int Int Int) Bool)
(declare-fun tr773 (Int Int Int) Bool)
(declare-fun tr7879 (Int Int Int) Bool)
(declare-fun tr783 (Int Int Int) Bool)
(declare-fun tr7980 (Int Int Int) Bool)
(declare-fun tr793 (Int Int Int) Bool)
(declare-fun tr8081 (Int Int Int) Bool)
(declare-fun tr803 (Int Int Int) Bool)
(declare-fun tr8182 (Int Int Int) Bool)
(declare-fun tr813 (Int Int Int) Bool)
(declare-fun tr8283 (Int Int Int) Bool)
(declare-fun tr823 (Int Int Int) Bool)
(declare-fun tr8384 (Int Int Int) Bool)
(declare-fun tr833 (Int Int Int) Bool)
(declare-fun tr8485 (Int Int Int) Bool)
(declare-fun tr843 (Int Int Int) Bool)
(declare-fun tr8586 (Int Int Int) Bool)
(declare-fun tr853 (Int Int Int) Bool)
(declare-fun tr8687 (Int Int Int) Bool)
(declare-fun tr863 (Int Int Int) Bool)
(declare-fun tr8788 (Int Int Int) Bool)
(declare-fun tr873 (Int Int Int) Bool)
(declare-fun tr8889 (Int Int Int) Bool)
(declare-fun tr883 (Int Int Int) Bool)
(declare-fun tr8990 (Int Int Int) Bool)
(declare-fun tr893 (Int Int Int) Bool)
(declare-fun tr9091 (Int Int Int) Bool)
(declare-fun tr903 (Int Int Int) Bool)
(declare-fun tr9192 (Int Int Int) Bool)
(declare-fun tr913 (Int Int Int) Bool)
(declare-fun tr9293 (Int Int Int) Bool)
(declare-fun tr923 (Int Int Int) Bool)
(declare-fun tr9394 (Int Int Int) Bool)
(declare-fun tr933 (Int Int Int) Bool)
(declare-fun tr9495 (Int Int Int) Bool)
(declare-fun tr943 (Int Int Int) Bool)
(declare-fun tr9596 (Int Int Int) Bool)
(declare-fun tr953 (Int Int Int) Bool)
(declare-fun tr9697 (Int Int Int) Bool)
(declare-fun tr963 (Int Int Int) Bool)
(declare-fun tr9798 (Int Int Int) Bool)
(declare-fun tr973 (Int Int Int) Bool)
(declare-fun tr9899 (Int Int Int) Bool)
(declare-fun tr983 (Int Int Int) Bool)
(declare-fun tr99100 (Int Int Int) Bool)
(declare-fun tr993 (Int Int Int) Bool)
(declare-fun tr100101 (Int Int Int) Bool)
(declare-fun tr1003 (Int Int Int) Bool)
(declare-fun tr101102 (Int Int Int) Bool)
(declare-fun tr1013 (Int Int Int) Bool)
(declare-fun tr102103 (Int Int Int) Bool)
(declare-fun tr1023 (Int Int Int) Bool)
(declare-fun tr103104 (Int Int Int) Bool)
(declare-fun tr1033 (Int Int Int) Bool)
(declare-fun tr104105 (Int Int Int) Bool)
(declare-fun tr1043 (Int Int Int) Bool)
(declare-fun tr105106 (Int Int Int) Bool)
(declare-fun tr1053 (Int Int Int) Bool)
(declare-fun tr106107 (Int Int Int) Bool)
(declare-fun tr1063 (Int Int Int) Bool)
(declare-fun tr107108 (Int Int Int) Bool)
(declare-fun tr1073 (Int Int Int) Bool)
(declare-fun tr108109 (Int Int Int) Bool)
(declare-fun tr1083 (Int Int Int) Bool)
(declare-fun tr109110 (Int Int Int) Bool)
(declare-fun tr1093 (Int Int Int) Bool)
(declare-fun tr110111 (Int Int Int) Bool)
(declare-fun tr1103 (Int Int Int) Bool)
(declare-fun tr111112 (Int Int Int) Bool)
(declare-fun tr1113 (Int Int Int) Bool)
(declare-fun tr112113 (Int Int Int) Bool)
(declare-fun tr1123 (Int Int Int) Bool)
(declare-fun tr113114 (Int Int Int) Bool)
(declare-fun tr1133 (Int Int Int) Bool)
(declare-fun tr114115 (Int Int Int) Bool)
(declare-fun tr1143 (Int Int Int) Bool)
(declare-fun tr115116 (Int Int Int) Bool)
(declare-fun tr1153 (Int Int Int) Bool)
(declare-fun tr116117 (Int Int Int) Bool)
(declare-fun tr1163 (Int Int Int) Bool)
(declare-fun tr117118 (Int Int Int) Bool)
(declare-fun tr1173 (Int Int Int) Bool)
(declare-fun tr118119 (Int Int Int) Bool)
(declare-fun tr1183 (Int Int Int) Bool)
(declare-fun tr119120 (Int Int Int) Bool)
(declare-fun tr1193 (Int Int Int) Bool)
(declare-fun tr120121 (Int Int Int) Bool)
(declare-fun tr1203 (Int Int Int) Bool)
(declare-fun tr121122 (Int Int Int) Bool)
(declare-fun tr1213 (Int Int Int) Bool)
(declare-fun tr122123 (Int Int Int) Bool)
(declare-fun tr1223 (Int Int Int) Bool)
(declare-fun tr123124 (Int Int Int) Bool)
(declare-fun tr1233 (Int Int Int) Bool)
(declare-fun tr124125 (Int Int Int) Bool)
(declare-fun tr1243 (Int Int Int) Bool)
(declare-fun tr125126 (Int Int Int) Bool)
(declare-fun tr1253 (Int Int Int) Bool)
(declare-fun tr126127 (Int Int Int) Bool)
(declare-fun tr1263 (Int Int Int) Bool)
(declare-fun tr127128 (Int Int Int) Bool)
(declare-fun tr1273 (Int Int Int) Bool)
(declare-fun tr128129 (Int Int Int) Bool)
(declare-fun tr1283 (Int Int Int) Bool)
(declare-fun tr129130 (Int Int Int) Bool)
(declare-fun tr1293 (Int Int Int) Bool)
(declare-fun tr130131 (Int Int Int) Bool)
(declare-fun tr1303 (Int Int Int) Bool)
(declare-fun tr131132 (Int Int Int) Bool)
(declare-fun tr1313 (Int Int Int) Bool)
(declare-fun tr11 (Int Int Int) Bool)
(declare-fun tr22 (Int Int Int) Bool)
(declare-fun tr44 (Int Int Int) Bool)
(declare-fun tr55 (Int Int Int) Bool)
(declare-fun tr66 (Int Int Int) Bool)
(declare-fun tr77 (Int Int Int) Bool)
(declare-fun tr88 (Int Int Int) Bool)
(declare-fun tr99 (Int Int Int) Bool)
(declare-fun tr1010 (Int Int Int) Bool)
(declare-fun tr1111 (Int Int Int) Bool)
(declare-fun tr1212 (Int Int Int) Bool)
(declare-fun tr1313 (Int Int Int) Bool)
(declare-fun tr1414 (Int Int Int) Bool)
(declare-fun tr1515 (Int Int Int) Bool)
(declare-fun tr1616 (Int Int Int) Bool)
(declare-fun tr1717 (Int Int Int) Bool)
(declare-fun tr1818 (Int Int Int) Bool)
(declare-fun tr1919 (Int Int Int) Bool)
(declare-fun tr2020 (Int Int Int) Bool)
(declare-fun tr2121 (Int Int Int) Bool)
(declare-fun tr2222 (Int Int Int) Bool)
(declare-fun tr2323 (Int Int Int) Bool)
(declare-fun tr2424 (Int Int Int) Bool)
(declare-fun tr2525 (Int Int Int) Bool)
(declare-fun tr2626 (Int Int Int) Bool)
(declare-fun tr2727 (Int Int Int) Bool)
(declare-fun tr2828 (Int Int Int) Bool)
(declare-fun tr2929 (Int Int Int) Bool)
(declare-fun tr3030 (Int Int Int) Bool)
(declare-fun tr3131 (Int Int Int) Bool)
(declare-fun tr3232 (Int Int Int) Bool)
(declare-fun tr3333 (Int Int Int) Bool)
(declare-fun tr3434 (Int Int Int) Bool)
(declare-fun tr3535 (Int Int Int) Bool)
(declare-fun tr3636 (Int Int Int) Bool)
(declare-fun tr3737 (Int Int Int) Bool)
(declare-fun tr3838 (Int Int Int) Bool)
(declare-fun tr3939 (Int Int Int) Bool)
(declare-fun tr4040 (Int Int Int) Bool)
(declare-fun tr4141 (Int Int Int) Bool)
(declare-fun tr4242 (Int Int Int) Bool)
(declare-fun tr4343 (Int Int Int) Bool)
(declare-fun tr4444 (Int Int Int) Bool)
(declare-fun tr4545 (Int Int Int) Bool)
(declare-fun tr4646 (Int Int Int) Bool)
(declare-fun tr4747 (Int Int Int) Bool)
(declare-fun tr4848 (Int Int Int) Bool)
(declare-fun tr4949 (Int Int Int) Bool)
(declare-fun tr5050 (Int Int Int) Bool)
(declare-fun tr5151 (Int Int Int) Bool)
(declare-fun tr5252 (Int Int Int) Bool)
(declare-fun tr5353 (Int Int Int) Bool)
(declare-fun tr5454 (Int Int Int) Bool)
(declare-fun tr5555 (Int Int Int) Bool)
(declare-fun tr5656 (Int Int Int) Bool)
(declare-fun tr5757 (Int Int Int) Bool)
(declare-fun tr5858 (Int Int Int) Bool)
(declare-fun tr5959 (Int Int Int) Bool)
(declare-fun tr6060 (Int Int Int) Bool)
(declare-fun tr6161 (Int Int Int) Bool)
(declare-fun tr6262 (Int Int Int) Bool)
(declare-fun tr6363 (Int Int Int) Bool)
(declare-fun tr6464 (Int Int Int) Bool)
(declare-fun tr6565 (Int Int Int) Bool)
(declare-fun tr6666 (Int Int Int) Bool)
(declare-fun tr6767 (Int Int Int) Bool)
(declare-fun tr6868 (Int Int Int) Bool)
(declare-fun tr6969 (Int Int Int) Bool)
(declare-fun tr7070 (Int Int Int) Bool)
(declare-fun tr7171 (Int Int Int) Bool)
(declare-fun tr7272 (Int Int Int) Bool)
(declare-fun tr7373 (Int Int Int) Bool)
(declare-fun tr7474 (Int Int Int) Bool)
(declare-fun tr7575 (Int Int Int) Bool)
(declare-fun tr7676 (Int Int Int) Bool)
(declare-fun tr7777 (Int Int Int) Bool)
(declare-fun tr7878 (Int Int Int) Bool)
(declare-fun tr7979 (Int Int Int) Bool)
(declare-fun tr8080 (Int Int Int) Bool)
(declare-fun tr8181 (Int Int Int) Bool)
(declare-fun tr8282 (Int Int Int) Bool)
(declare-fun tr8383 (Int Int Int) Bool)
(declare-fun tr8484 (Int Int Int) Bool)
(declare-fun tr8585 (Int Int Int) Bool)
(declare-fun tr8686 (Int Int Int) Bool)
(declare-fun tr8787 (Int Int Int) Bool)
(declare-fun tr8888 (Int Int Int) Bool)
(declare-fun tr8989 (Int Int Int) Bool)
(declare-fun tr9090 (Int Int Int) Bool)
(declare-fun tr9191 (Int Int Int) Bool)
(declare-fun tr9292 (Int Int Int) Bool)
(declare-fun tr9393 (Int Int Int) Bool)
(declare-fun tr9494 (Int Int Int) Bool)
(declare-fun tr9595 (Int Int Int) Bool)
(declare-fun tr9696 (Int Int Int) Bool)
(declare-fun tr9797 (Int Int Int) Bool)
(declare-fun tr9898 (Int Int Int) Bool)
(declare-fun tr9999 (Int Int Int) Bool)
(declare-fun tr100100 (Int Int Int) Bool)
(declare-fun tr101101 (Int Int Int) Bool)
(declare-fun tr102102 (Int Int Int) Bool)
(declare-fun tr103103 (Int Int Int) Bool)
(declare-fun tr104104 (Int Int Int) Bool)
(declare-fun tr105105 (Int Int Int) Bool)
(declare-fun tr106106 (Int Int Int) Bool)
(declare-fun tr107107 (Int Int Int) Bool)
(declare-fun tr108108 (Int Int Int) Bool)
(declare-fun tr109109 (Int Int Int) Bool)
(declare-fun tr110110 (Int Int Int) Bool)
(declare-fun tr111111 (Int Int Int) Bool)
(declare-fun tr112112 (Int Int Int) Bool)
(declare-fun tr113113 (Int Int Int) Bool)
(declare-fun tr114114 (Int Int Int) Bool)
(declare-fun tr115115 (Int Int Int) Bool)
(declare-fun tr116116 (Int Int Int) Bool)
(declare-fun tr117117 (Int Int Int) Bool)
(declare-fun tr118118 (Int Int Int) Bool)
(declare-fun tr119119 (Int Int Int) Bool)
(declare-fun tr120120 (Int Int Int) Bool)
(declare-fun tr121121 (Int Int Int) Bool)
(declare-fun tr122122 (Int Int Int) Bool)
(declare-fun tr123123 (Int Int Int) Bool)
(declare-fun tr124124 (Int Int Int) Bool)
(declare-fun tr125125 (Int Int Int) Bool)
(declare-fun tr126126 (Int Int Int) Bool)
(declare-fun tr127127 (Int Int Int) Bool)
(declare-fun tr128128 (Int Int Int) Bool)
(declare-fun tr129129 (Int Int Int) Bool)
(declare-fun tr130130 (Int Int Int) Bool)
(declare-fun tr131131 (Int Int Int) Bool)
(assert (forall ((input0 Int) (var1 Int) (input0_p Int) (time Int))
  (! (=> (= time (- 1)) (tr01 input0 0 time)) :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (input0_p Int) (time Int))
  (! (=> (and (tr01 input0 var1 time) true (distinct input0_p 1))
         (tr12 input0_p var1 (+ time 1)))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (input0_p Int) (time Int))
  (! (=> (and (tr01 input0 var1 time) true (= input0_p 1))
         (tr13 input0_p var1 (+ time 1)))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (input0_p Int) (time Int))
  (! (=> (and (tr01 input0 var1 time)
              true
              true
              (not (distinct input0_p 1))
              (not (= input0_p 1)))
         (tr11 input0_p var1 (+ time 1)))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (input0_p Int) (time Int))
  (! (=> (and (tr12 input0 var1 time) (distinct input0 1) (distinct input0_p 1))
         (tr24 input0_p (+ var1 1) (+ time 1)))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (input0_p Int) (time Int))
  (! (=> (and (tr12 input0 var1 time) (distinct input0 1) (= input0_p 1))
         (tr23 input0_p (+ var1 1) (+ time 1)))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (input0_p Int) (time Int))
  (! (=> (and (tr12 input0 var1 time)
              (distinct input0 1)
              true
              (not (distinct input0_p 1))
              (not (= input0_p 1)))
         (tr22 input0_p (+ var1 1) (+ time 1)))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (input0_p Int) (time Int))
  (! (=> (and (tr24 input0 var1 time) (distinct input0 1) (distinct input0_p 1))
         (tr45 input0_p (+ var1 1) (+ time 1)))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (input0_p Int) (time Int))
  (! (=> (and (tr24 input0 var1 time) (distinct input0 1) (= input0_p 1))
         (tr43 input0_p (+ var1 1) (+ time 1)))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (input0_p Int) (time Int))
  (! (=> (and (tr24 input0 var1 time)
              (distinct input0 1)
              true
              (not (distinct input0_p 1))
              (not (= input0_p 1)))
         (tr44 input0_p (+ var1 1) (+ time 1)))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (input0_p Int) (time Int))
  (! (=> (and (tr45 input0 var1 time) (distinct input0 1) (distinct input0_p 1))
         (tr56 input0_p (+ var1 1) (+ time 1)))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (input0_p Int) (time Int))
  (! (=> (and (tr45 input0 var1 time) (distinct input0 1) (= input0_p 1))
         (tr53 input0_p (+ var1 1) (+ time 1)))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (input0_p Int) (time Int))
  (! (=> (and (tr45 input0 var1 time)
              (distinct input0 1)
              true
              (not (distinct input0_p 1))
              (not (= input0_p 1)))
         (tr55 input0_p (+ var1 1) (+ time 1)))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (input0_p Int) (time Int))
  (! (=> (and (tr56 input0 var1 time) (distinct input0 1) (distinct input0_p 1))
         (tr67 input0_p (+ var1 1) (+ time 1)))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (input0_p Int) (time Int))
  (! (=> (and (tr56 input0 var1 time) (distinct input0 1) (= input0_p 1))
         (tr63 input0_p (+ var1 1) (+ time 1)))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (input0_p Int) (time Int))
  (! (=> (and (tr56 input0 var1 time)
              (distinct input0 1)
              true
              (not (distinct input0_p 1))
              (not (= input0_p 1)))
         (tr66 input0_p (+ var1 1) (+ time 1)))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (input0_p Int) (time Int))
  (! (=> (and (tr67 input0 var1 time) (distinct input0 1) (distinct input0_p 1))
         (tr78 input0_p (+ var1 1) (+ time 1)))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (input0_p Int) (time Int))
  (! (=> (and (tr67 input0 var1 time) (distinct input0 1) (= input0_p 1))
         (tr73 input0_p (+ var1 1) (+ time 1)))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (input0_p Int) (time Int))
  (! (=> (and (tr67 input0 var1 time)
              (distinct input0 1)
              true
              (not (distinct input0_p 1))
              (not (= input0_p 1)))
         (tr77 input0_p (+ var1 1) (+ time 1)))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (input0_p Int) (time Int))
  (! (=> (and (tr78 input0 var1 time) (distinct input0 1) (distinct input0_p 1))
         (tr89 input0_p (+ var1 1) (+ time 1)))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (input0_p Int) (time Int))
  (! (=> (and (tr78 input0 var1 time) (distinct input0 1) (= input0_p 1))
         (tr83 input0_p (+ var1 1) (+ time 1)))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (input0_p Int) (time Int))
  (! (=> (and (tr78 input0 var1 time)
              (distinct input0 1)
              true
              (not (distinct input0_p 1))
              (not (= input0_p 1)))
         (tr88 input0_p (+ var1 1) (+ time 1)))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (input0_p Int) (time Int))
  (! (=> (and (tr89 input0 var1 time) (distinct input0 1) (distinct input0_p 1))
         (tr910 input0_p (+ var1 1) (+ time 1)))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (input0_p Int) (time Int))
  (! (=> (and (tr89 input0 var1 time) (distinct input0 1) (= input0_p 1))
         (tr93 input0_p (+ var1 1) (+ time 1)))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (input0_p Int) (time Int))
  (! (=> (and (tr89 input0 var1 time)
              (distinct input0 1)
              true
              (not (distinct input0_p 1))
              (not (= input0_p 1)))
         (tr99 input0_p (+ var1 1) (+ time 1)))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (input0_p Int) (time Int))
  (! (=> (and (tr910 input0 var1 time)
              (distinct input0 1)
              (distinct input0_p 1))
         (tr1011 input0_p (+ var1 1) (+ time 1)))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (input0_p Int) (time Int))
  (! (=> (and (tr910 input0 var1 time) (distinct input0 1) (= input0_p 1))
         (tr103 input0_p (+ var1 1) (+ time 1)))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (input0_p Int) (time Int))
  (! (=> (and (tr910 input0 var1 time)
              (distinct input0 1)
              true
              (not (distinct input0_p 1))
              (not (= input0_p 1)))
         (tr1010 input0_p (+ var1 1) (+ time 1)))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (input0_p Int) (time Int))
  (! (=> (and (tr1011 input0 var1 time)
              (distinct input0 1)
              (distinct input0_p 1))
         (tr1112 input0_p (+ var1 1) (+ time 1)))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (input0_p Int) (time Int))
  (! (=> (and (tr1011 input0 var1 time) (distinct input0 1) (= input0_p 1))
         (tr113 input0_p (+ var1 1) (+ time 1)))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (input0_p Int) (time Int))
  (! (=> (and (tr1011 input0 var1 time)
              (distinct input0 1)
              true
              (not (distinct input0_p 1))
              (not (= input0_p 1)))
         (tr1111 input0_p (+ var1 1) (+ time 1)))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (input0_p Int) (time Int))
  (! (=> (and (tr1112 input0 var1 time)
              (distinct input0 1)
              (distinct input0_p 1))
         (tr1213 input0_p (+ var1 1) (+ time 1)))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (input0_p Int) (time Int))
  (! (=> (and (tr1112 input0 var1 time) (distinct input0 1) (= input0_p 1))
         (tr123 input0_p (+ var1 1) (+ time 1)))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (input0_p Int) (time Int))
  (! (=> (and (tr1112 input0 var1 time)
              (distinct input0 1)
              true
              (not (distinct input0_p 1))
              (not (= input0_p 1)))
         (tr1212 input0_p (+ var1 1) (+ time 1)))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (input0_p Int) (time Int))
  (! (=> (and (tr1213 input0 var1 time)
              (distinct input0 1)
              (distinct input0_p 1))
         (tr1314 input0_p (+ var1 1) (+ time 1)))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (input0_p Int) (time Int))
  (! (=> (and (tr1213 input0 var1 time) (distinct input0 1) (= input0_p 1))
         (tr133 input0_p (+ var1 1) (+ time 1)))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (input0_p Int) (time Int))
  (! (=> (and (tr1213 input0 var1 time)
              (distinct input0 1)
              true
              (not (distinct input0_p 1))
              (not (= input0_p 1)))
         (tr1313 input0_p (+ var1 1) (+ time 1)))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (input0_p Int) (time Int))
  (! (=> (and (tr1314 input0 var1 time)
              (distinct input0 1)
              (distinct input0_p 1))
         (tr1415 input0_p (+ var1 1) (+ time 1)))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (input0_p Int) (time Int))
  (! (=> (and (tr1314 input0 var1 time) (distinct input0 1) (= input0_p 1))
         (tr143 input0_p (+ var1 1) (+ time 1)))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (input0_p Int) (time Int))
  (! (=> (and (tr1314 input0 var1 time)
              (distinct input0 1)
              true
              (not (distinct input0_p 1))
              (not (= input0_p 1)))
         (tr1414 input0_p (+ var1 1) (+ time 1)))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (input0_p Int) (time Int))
  (! (=> (and (tr1415 input0 var1 time)
              (distinct input0 1)
              (distinct input0_p 1))
         (tr1516 input0_p (+ var1 1) (+ time 1)))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (input0_p Int) (time Int))
  (! (=> (and (tr1415 input0 var1 time) (distinct input0 1) (= input0_p 1))
         (tr153 input0_p (+ var1 1) (+ time 1)))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (input0_p Int) (time Int))
  (! (=> (and (tr1415 input0 var1 time)
              (distinct input0 1)
              true
              (not (distinct input0_p 1))
              (not (= input0_p 1)))
         (tr1515 input0_p (+ var1 1) (+ time 1)))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (input0_p Int) (time Int))
  (! (=> (and (tr1516 input0 var1 time)
              (distinct input0 1)
              (distinct input0_p 1))
         (tr1617 input0_p (+ var1 1) (+ time 1)))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (input0_p Int) (time Int))
  (! (=> (and (tr1516 input0 var1 time) (distinct input0 1) (= input0_p 1))
         (tr163 input0_p (+ var1 1) (+ time 1)))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (input0_p Int) (time Int))
  (! (=> (and (tr1516 input0 var1 time)
              (distinct input0 1)
              true
              (not (distinct input0_p 1))
              (not (= input0_p 1)))
         (tr1616 input0_p (+ var1 1) (+ time 1)))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (input0_p Int) (time Int))
  (! (=> (and (tr1617 input0 var1 time)
              (distinct input0 1)
              (distinct input0_p 1))
         (tr1718 input0_p (+ var1 1) (+ time 1)))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (input0_p Int) (time Int))
  (! (=> (and (tr1617 input0 var1 time) (distinct input0 1) (= input0_p 1))
         (tr173 input0_p (+ var1 1) (+ time 1)))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (input0_p Int) (time Int))
  (! (=> (and (tr1617 input0 var1 time)
              (distinct input0 1)
              true
              (not (distinct input0_p 1))
              (not (= input0_p 1)))
         (tr1717 input0_p (+ var1 1) (+ time 1)))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (input0_p Int) (time Int))
  (! (=> (and (tr1718 input0 var1 time)
              (distinct input0 1)
              (distinct input0_p 1))
         (tr1819 input0_p (+ var1 1) (+ time 1)))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (input0_p Int) (time Int))
  (! (=> (and (tr1718 input0 var1 time) (distinct input0 1) (= input0_p 1))
         (tr183 input0_p (+ var1 1) (+ time 1)))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (input0_p Int) (time Int))
  (! (=> (and (tr1718 input0 var1 time)
              (distinct input0 1)
              true
              (not (distinct input0_p 1))
              (not (= input0_p 1)))
         (tr1818 input0_p (+ var1 1) (+ time 1)))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (input0_p Int) (time Int))
  (! (=> (and (tr1819 input0 var1 time)
              (distinct input0 1)
              (distinct input0_p 1))
         (tr1920 input0_p (+ var1 1) (+ time 1)))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (input0_p Int) (time Int))
  (! (=> (and (tr1819 input0 var1 time) (distinct input0 1) (= input0_p 1))
         (tr193 input0_p (+ var1 1) (+ time 1)))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (input0_p Int) (time Int))
  (! (=> (and (tr1819 input0 var1 time)
              (distinct input0 1)
              true
              (not (distinct input0_p 1))
              (not (= input0_p 1)))
         (tr1919 input0_p (+ var1 1) (+ time 1)))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (input0_p Int) (time Int))
  (! (=> (and (tr1920 input0 var1 time)
              (distinct input0 1)
              (distinct input0_p 1))
         (tr2021 input0_p (+ var1 1) (+ time 1)))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (input0_p Int) (time Int))
  (! (=> (and (tr1920 input0 var1 time) (distinct input0 1) (= input0_p 1))
         (tr203 input0_p (+ var1 1) (+ time 1)))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (input0_p Int) (time Int))
  (! (=> (and (tr1920 input0 var1 time)
              (distinct input0 1)
              true
              (not (distinct input0_p 1))
              (not (= input0_p 1)))
         (tr2020 input0_p (+ var1 1) (+ time 1)))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (input0_p Int) (time Int))
  (! (=> (and (tr2021 input0 var1 time)
              (distinct input0 1)
              (distinct input0_p 1))
         (tr2122 input0_p (+ var1 1) (+ time 1)))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (input0_p Int) (time Int))
  (! (=> (and (tr2021 input0 var1 time) (distinct input0 1) (= input0_p 1))
         (tr213 input0_p (+ var1 1) (+ time 1)))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (input0_p Int) (time Int))
  (! (=> (and (tr2021 input0 var1 time)
              (distinct input0 1)
              true
              (not (distinct input0_p 1))
              (not (= input0_p 1)))
         (tr2121 input0_p (+ var1 1) (+ time 1)))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (input0_p Int) (time Int))
  (! (=> (and (tr2122 input0 var1 time)
              (distinct input0 1)
              (distinct input0_p 1))
         (tr2223 input0_p (+ var1 1) (+ time 1)))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (input0_p Int) (time Int))
  (! (=> (and (tr2122 input0 var1 time) (distinct input0 1) (= input0_p 1))
         (tr223 input0_p (+ var1 1) (+ time 1)))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (input0_p Int) (time Int))
  (! (=> (and (tr2122 input0 var1 time)
              (distinct input0 1)
              true
              (not (distinct input0_p 1))
              (not (= input0_p 1)))
         (tr2222 input0_p (+ var1 1) (+ time 1)))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (input0_p Int) (time Int))
  (! (=> (and (tr2223 input0 var1 time)
              (distinct input0 1)
              (distinct input0_p 1))
         (tr2324 input0_p (+ var1 1) (+ time 1)))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (input0_p Int) (time Int))
  (! (=> (and (tr2223 input0 var1 time) (distinct input0 1) (= input0_p 1))
         (tr233 input0_p (+ var1 1) (+ time 1)))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (input0_p Int) (time Int))
  (! (=> (and (tr2223 input0 var1 time)
              (distinct input0 1)
              true
              (not (distinct input0_p 1))
              (not (= input0_p 1)))
         (tr2323 input0_p (+ var1 1) (+ time 1)))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (input0_p Int) (time Int))
  (! (=> (and (tr2324 input0 var1 time)
              (distinct input0 1)
              (distinct input0_p 1))
         (tr2425 input0_p (+ var1 1) (+ time 1)))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (input0_p Int) (time Int))
  (! (=> (and (tr2324 input0 var1 time) (distinct input0 1) (= input0_p 1))
         (tr243 input0_p (+ var1 1) (+ time 1)))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (input0_p Int) (time Int))
  (! (=> (and (tr2324 input0 var1 time)
              (distinct input0 1)
              true
              (not (distinct input0_p 1))
              (not (= input0_p 1)))
         (tr2424 input0_p (+ var1 1) (+ time 1)))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (input0_p Int) (time Int))
  (! (=> (and (tr2425 input0 var1 time)
              (distinct input0 1)
              (distinct input0_p 1))
         (tr2526 input0_p (+ var1 1) (+ time 1)))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (input0_p Int) (time Int))
  (! (=> (and (tr2425 input0 var1 time) (distinct input0 1) (= input0_p 1))
         (tr253 input0_p (+ var1 1) (+ time 1)))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (input0_p Int) (time Int))
  (! (=> (and (tr2425 input0 var1 time)
              (distinct input0 1)
              true
              (not (distinct input0_p 1))
              (not (= input0_p 1)))
         (tr2525 input0_p (+ var1 1) (+ time 1)))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (input0_p Int) (time Int))
  (! (=> (and (tr2526 input0 var1 time)
              (distinct input0 1)
              (distinct input0_p 1))
         (tr2627 input0_p (+ var1 1) (+ time 1)))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (input0_p Int) (time Int))
  (! (=> (and (tr2526 input0 var1 time) (distinct input0 1) (= input0_p 1))
         (tr263 input0_p (+ var1 1) (+ time 1)))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (input0_p Int) (time Int))
  (! (=> (and (tr2526 input0 var1 time)
              (distinct input0 1)
              true
              (not (distinct input0_p 1))
              (not (= input0_p 1)))
         (tr2626 input0_p (+ var1 1) (+ time 1)))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (input0_p Int) (time Int))
  (! (=> (and (tr2627 input0 var1 time)
              (distinct input0 1)
              (distinct input0_p 1))
         (tr2728 input0_p (+ var1 1) (+ time 1)))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (input0_p Int) (time Int))
  (! (=> (and (tr2627 input0 var1 time) (distinct input0 1) (= input0_p 1))
         (tr273 input0_p (+ var1 1) (+ time 1)))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (input0_p Int) (time Int))
  (! (=> (and (tr2627 input0 var1 time)
              (distinct input0 1)
              true
              (not (distinct input0_p 1))
              (not (= input0_p 1)))
         (tr2727 input0_p (+ var1 1) (+ time 1)))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (input0_p Int) (time Int))
  (! (=> (and (tr2728 input0 var1 time)
              (distinct input0 1)
              (distinct input0_p 1))
         (tr2829 input0_p (+ var1 1) (+ time 1)))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (input0_p Int) (time Int))
  (! (=> (and (tr2728 input0 var1 time) (distinct input0 1) (= input0_p 1))
         (tr283 input0_p (+ var1 1) (+ time 1)))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (input0_p Int) (time Int))
  (! (=> (and (tr2728 input0 var1 time)
              (distinct input0 1)
              true
              (not (distinct input0_p 1))
              (not (= input0_p 1)))
         (tr2828 input0_p (+ var1 1) (+ time 1)))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (input0_p Int) (time Int))
  (! (=> (and (tr2829 input0 var1 time)
              (distinct input0 1)
              (distinct input0_p 1))
         (tr2930 input0_p (+ var1 1) (+ time 1)))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (input0_p Int) (time Int))
  (! (=> (and (tr2829 input0 var1 time) (distinct input0 1) (= input0_p 1))
         (tr293 input0_p (+ var1 1) (+ time 1)))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (input0_p Int) (time Int))
  (! (=> (and (tr2829 input0 var1 time)
              (distinct input0 1)
              true
              (not (distinct input0_p 1))
              (not (= input0_p 1)))
         (tr2929 input0_p (+ var1 1) (+ time 1)))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (input0_p Int) (time Int))
  (! (=> (and (tr2930 input0 var1 time)
              (distinct input0 1)
              (distinct input0_p 1))
         (tr3031 input0_p (+ var1 1) (+ time 1)))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (input0_p Int) (time Int))
  (! (=> (and (tr2930 input0 var1 time) (distinct input0 1) (= input0_p 1))
         (tr303 input0_p (+ var1 1) (+ time 1)))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (input0_p Int) (time Int))
  (! (=> (and (tr2930 input0 var1 time)
              (distinct input0 1)
              true
              (not (distinct input0_p 1))
              (not (= input0_p 1)))
         (tr3030 input0_p (+ var1 1) (+ time 1)))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (input0_p Int) (time Int))
  (! (=> (and (tr3031 input0 var1 time)
              (distinct input0 1)
              (distinct input0_p 1))
         (tr3132 input0_p (+ var1 1) (+ time 1)))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (input0_p Int) (time Int))
  (! (=> (and (tr3031 input0 var1 time) (distinct input0 1) (= input0_p 1))
         (tr313 input0_p (+ var1 1) (+ time 1)))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (input0_p Int) (time Int))
  (! (=> (and (tr3031 input0 var1 time)
              (distinct input0 1)
              true
              (not (distinct input0_p 1))
              (not (= input0_p 1)))
         (tr3131 input0_p (+ var1 1) (+ time 1)))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (input0_p Int) (time Int))
  (! (=> (and (tr3132 input0 var1 time)
              (distinct input0 1)
              (distinct input0_p 1))
         (tr3233 input0_p (+ var1 1) (+ time 1)))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (input0_p Int) (time Int))
  (! (=> (and (tr3132 input0 var1 time) (distinct input0 1) (= input0_p 1))
         (tr323 input0_p (+ var1 1) (+ time 1)))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (input0_p Int) (time Int))
  (! (=> (and (tr3132 input0 var1 time)
              (distinct input0 1)
              true
              (not (distinct input0_p 1))
              (not (= input0_p 1)))
         (tr3232 input0_p (+ var1 1) (+ time 1)))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (input0_p Int) (time Int))
  (! (=> (and (tr3233 input0 var1 time)
              (distinct input0 1)
              (distinct input0_p 1))
         (tr3334 input0_p (+ var1 1) (+ time 1)))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (input0_p Int) (time Int))
  (! (=> (and (tr3233 input0 var1 time) (distinct input0 1) (= input0_p 1))
         (tr333 input0_p (+ var1 1) (+ time 1)))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (input0_p Int) (time Int))
  (! (=> (and (tr3233 input0 var1 time)
              (distinct input0 1)
              true
              (not (distinct input0_p 1))
              (not (= input0_p 1)))
         (tr3333 input0_p (+ var1 1) (+ time 1)))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (input0_p Int) (time Int))
  (! (=> (and (tr3334 input0 var1 time)
              (distinct input0 1)
              (distinct input0_p 1))
         (tr3435 input0_p (+ var1 1) (+ time 1)))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (input0_p Int) (time Int))
  (! (=> (and (tr3334 input0 var1 time) (distinct input0 1) (= input0_p 1))
         (tr343 input0_p (+ var1 1) (+ time 1)))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (input0_p Int) (time Int))
  (! (=> (and (tr3334 input0 var1 time)
              (distinct input0 1)
              true
              (not (distinct input0_p 1))
              (not (= input0_p 1)))
         (tr3434 input0_p (+ var1 1) (+ time 1)))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (input0_p Int) (time Int))
  (! (=> (and (tr3435 input0 var1 time)
              (distinct input0 1)
              (distinct input0_p 1))
         (tr3536 input0_p (+ var1 1) (+ time 1)))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (input0_p Int) (time Int))
  (! (=> (and (tr3435 input0 var1 time) (distinct input0 1) (= input0_p 1))
         (tr353 input0_p (+ var1 1) (+ time 1)))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (input0_p Int) (time Int))
  (! (=> (and (tr3435 input0 var1 time)
              (distinct input0 1)
              true
              (not (distinct input0_p 1))
              (not (= input0_p 1)))
         (tr3535 input0_p (+ var1 1) (+ time 1)))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (input0_p Int) (time Int))
  (! (=> (and (tr3536 input0 var1 time)
              (distinct input0 1)
              (distinct input0_p 1))
         (tr3637 input0_p (+ var1 1) (+ time 1)))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (input0_p Int) (time Int))
  (! (=> (and (tr3536 input0 var1 time) (distinct input0 1) (= input0_p 1))
         (tr363 input0_p (+ var1 1) (+ time 1)))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (input0_p Int) (time Int))
  (! (=> (and (tr3536 input0 var1 time)
              (distinct input0 1)
              true
              (not (distinct input0_p 1))
              (not (= input0_p 1)))
         (tr3636 input0_p (+ var1 1) (+ time 1)))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (input0_p Int) (time Int))
  (! (=> (and (tr3637 input0 var1 time)
              (distinct input0 1)
              (distinct input0_p 1))
         (tr3738 input0_p (+ var1 1) (+ time 1)))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (input0_p Int) (time Int))
  (! (=> (and (tr3637 input0 var1 time) (distinct input0 1) (= input0_p 1))
         (tr373 input0_p (+ var1 1) (+ time 1)))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (input0_p Int) (time Int))
  (! (=> (and (tr3637 input0 var1 time)
              (distinct input0 1)
              true
              (not (distinct input0_p 1))
              (not (= input0_p 1)))
         (tr3737 input0_p (+ var1 1) (+ time 1)))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (input0_p Int) (time Int))
  (! (=> (and (tr3738 input0 var1 time)
              (distinct input0 1)
              (distinct input0_p 1))
         (tr3839 input0_p (+ var1 1) (+ time 1)))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (input0_p Int) (time Int))
  (! (=> (and (tr3738 input0 var1 time) (distinct input0 1) (= input0_p 1))
         (tr383 input0_p (+ var1 1) (+ time 1)))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (input0_p Int) (time Int))
  (! (=> (and (tr3738 input0 var1 time)
              (distinct input0 1)
              true
              (not (distinct input0_p 1))
              (not (= input0_p 1)))
         (tr3838 input0_p (+ var1 1) (+ time 1)))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (input0_p Int) (time Int))
  (! (=> (and (tr3839 input0 var1 time)
              (distinct input0 1)
              (distinct input0_p 1))
         (tr3940 input0_p (+ var1 1) (+ time 1)))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (input0_p Int) (time Int))
  (! (=> (and (tr3839 input0 var1 time) (distinct input0 1) (= input0_p 1))
         (tr393 input0_p (+ var1 1) (+ time 1)))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (input0_p Int) (time Int))
  (! (=> (and (tr3839 input0 var1 time)
              (distinct input0 1)
              true
              (not (distinct input0_p 1))
              (not (= input0_p 1)))
         (tr3939 input0_p (+ var1 1) (+ time 1)))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (input0_p Int) (time Int))
  (! (=> (and (tr3940 input0 var1 time)
              (distinct input0 1)
              (distinct input0_p 1))
         (tr4041 input0_p (+ var1 1) (+ time 1)))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (input0_p Int) (time Int))
  (! (=> (and (tr3940 input0 var1 time) (distinct input0 1) (= input0_p 1))
         (tr403 input0_p (+ var1 1) (+ time 1)))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (input0_p Int) (time Int))
  (! (=> (and (tr3940 input0 var1 time)
              (distinct input0 1)
              true
              (not (distinct input0_p 1))
              (not (= input0_p 1)))
         (tr4040 input0_p (+ var1 1) (+ time 1)))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (input0_p Int) (time Int))
  (! (=> (and (tr4041 input0 var1 time)
              (distinct input0 1)
              (distinct input0_p 1))
         (tr4142 input0_p (+ var1 1) (+ time 1)))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (input0_p Int) (time Int))
  (! (=> (and (tr4041 input0 var1 time) (distinct input0 1) (= input0_p 1))
         (tr413 input0_p (+ var1 1) (+ time 1)))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (input0_p Int) (time Int))
  (! (=> (and (tr4041 input0 var1 time)
              (distinct input0 1)
              true
              (not (distinct input0_p 1))
              (not (= input0_p 1)))
         (tr4141 input0_p (+ var1 1) (+ time 1)))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (input0_p Int) (time Int))
  (! (=> (and (tr4142 input0 var1 time)
              (distinct input0 1)
              (distinct input0_p 1))
         (tr4243 input0_p (+ var1 1) (+ time 1)))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (input0_p Int) (time Int))
  (! (=> (and (tr4142 input0 var1 time) (distinct input0 1) (= input0_p 1))
         (tr423 input0_p (+ var1 1) (+ time 1)))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (input0_p Int) (time Int))
  (! (=> (and (tr4142 input0 var1 time)
              (distinct input0 1)
              true
              (not (distinct input0_p 1))
              (not (= input0_p 1)))
         (tr4242 input0_p (+ var1 1) (+ time 1)))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (input0_p Int) (time Int))
  (! (=> (and (tr4243 input0 var1 time)
              (distinct input0 1)
              (distinct input0_p 1))
         (tr4344 input0_p (+ var1 1) (+ time 1)))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (input0_p Int) (time Int))
  (! (=> (and (tr4243 input0 var1 time) (distinct input0 1) (= input0_p 1))
         (tr433 input0_p (+ var1 1) (+ time 1)))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (input0_p Int) (time Int))
  (! (=> (and (tr4243 input0 var1 time)
              (distinct input0 1)
              true
              (not (distinct input0_p 1))
              (not (= input0_p 1)))
         (tr4343 input0_p (+ var1 1) (+ time 1)))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (input0_p Int) (time Int))
  (! (=> (and (tr4344 input0 var1 time)
              (distinct input0 1)
              (distinct input0_p 1))
         (tr4445 input0_p (+ var1 1) (+ time 1)))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (input0_p Int) (time Int))
  (! (=> (and (tr4344 input0 var1 time) (distinct input0 1) (= input0_p 1))
         (tr443 input0_p (+ var1 1) (+ time 1)))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (input0_p Int) (time Int))
  (! (=> (and (tr4344 input0 var1 time)
              (distinct input0 1)
              true
              (not (distinct input0_p 1))
              (not (= input0_p 1)))
         (tr4444 input0_p (+ var1 1) (+ time 1)))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (input0_p Int) (time Int))
  (! (=> (and (tr4445 input0 var1 time)
              (distinct input0 1)
              (distinct input0_p 1))
         (tr4546 input0_p (+ var1 1) (+ time 1)))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (input0_p Int) (time Int))
  (! (=> (and (tr4445 input0 var1 time) (distinct input0 1) (= input0_p 1))
         (tr453 input0_p (+ var1 1) (+ time 1)))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (input0_p Int) (time Int))
  (! (=> (and (tr4445 input0 var1 time)
              (distinct input0 1)
              true
              (not (distinct input0_p 1))
              (not (= input0_p 1)))
         (tr4545 input0_p (+ var1 1) (+ time 1)))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (input0_p Int) (time Int))
  (! (=> (and (tr4546 input0 var1 time)
              (distinct input0 1)
              (distinct input0_p 1))
         (tr4647 input0_p (+ var1 1) (+ time 1)))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (input0_p Int) (time Int))
  (! (=> (and (tr4546 input0 var1 time) (distinct input0 1) (= input0_p 1))
         (tr463 input0_p (+ var1 1) (+ time 1)))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (input0_p Int) (time Int))
  (! (=> (and (tr4546 input0 var1 time)
              (distinct input0 1)
              true
              (not (distinct input0_p 1))
              (not (= input0_p 1)))
         (tr4646 input0_p (+ var1 1) (+ time 1)))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (input0_p Int) (time Int))
  (! (=> (and (tr4647 input0 var1 time)
              (distinct input0 1)
              (distinct input0_p 1))
         (tr4748 input0_p (+ var1 1) (+ time 1)))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (input0_p Int) (time Int))
  (! (=> (and (tr4647 input0 var1 time) (distinct input0 1) (= input0_p 1))
         (tr473 input0_p (+ var1 1) (+ time 1)))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (input0_p Int) (time Int))
  (! (=> (and (tr4647 input0 var1 time)
              (distinct input0 1)
              true
              (not (distinct input0_p 1))
              (not (= input0_p 1)))
         (tr4747 input0_p (+ var1 1) (+ time 1)))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (input0_p Int) (time Int))
  (! (=> (and (tr4748 input0 var1 time)
              (distinct input0 1)
              (distinct input0_p 1))
         (tr4849 input0_p (+ var1 1) (+ time 1)))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (input0_p Int) (time Int))
  (! (=> (and (tr4748 input0 var1 time) (distinct input0 1) (= input0_p 1))
         (tr483 input0_p (+ var1 1) (+ time 1)))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (input0_p Int) (time Int))
  (! (=> (and (tr4748 input0 var1 time)
              (distinct input0 1)
              true
              (not (distinct input0_p 1))
              (not (= input0_p 1)))
         (tr4848 input0_p (+ var1 1) (+ time 1)))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (input0_p Int) (time Int))
  (! (=> (and (tr4849 input0 var1 time)
              (distinct input0 1)
              (distinct input0_p 1))
         (tr4950 input0_p (+ var1 1) (+ time 1)))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (input0_p Int) (time Int))
  (! (=> (and (tr4849 input0 var1 time) (distinct input0 1) (= input0_p 1))
         (tr493 input0_p (+ var1 1) (+ time 1)))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (input0_p Int) (time Int))
  (! (=> (and (tr4849 input0 var1 time)
              (distinct input0 1)
              true
              (not (distinct input0_p 1))
              (not (= input0_p 1)))
         (tr4949 input0_p (+ var1 1) (+ time 1)))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (input0_p Int) (time Int))
  (! (=> (and (tr4950 input0 var1 time)
              (distinct input0 1)
              (distinct input0_p 1))
         (tr5051 input0_p (+ var1 1) (+ time 1)))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (input0_p Int) (time Int))
  (! (=> (and (tr4950 input0 var1 time) (distinct input0 1) (= input0_p 1))
         (tr503 input0_p (+ var1 1) (+ time 1)))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (input0_p Int) (time Int))
  (! (=> (and (tr4950 input0 var1 time)
              (distinct input0 1)
              true
              (not (distinct input0_p 1))
              (not (= input0_p 1)))
         (tr5050 input0_p (+ var1 1) (+ time 1)))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (input0_p Int) (time Int))
  (! (=> (and (tr5051 input0 var1 time)
              (distinct input0 1)
              (distinct input0_p 1))
         (tr5152 input0_p (+ var1 1) (+ time 1)))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (input0_p Int) (time Int))
  (! (=> (and (tr5051 input0 var1 time) (distinct input0 1) (= input0_p 1))
         (tr513 input0_p (+ var1 1) (+ time 1)))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (input0_p Int) (time Int))
  (! (=> (and (tr5051 input0 var1 time)
              (distinct input0 1)
              true
              (not (distinct input0_p 1))
              (not (= input0_p 1)))
         (tr5151 input0_p (+ var1 1) (+ time 1)))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (input0_p Int) (time Int))
  (! (=> (and (tr5152 input0 var1 time)
              (distinct input0 1)
              (distinct input0_p 1))
         (tr5253 input0_p (+ var1 1) (+ time 1)))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (input0_p Int) (time Int))
  (! (=> (and (tr5152 input0 var1 time) (distinct input0 1) (= input0_p 1))
         (tr523 input0_p (+ var1 1) (+ time 1)))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (input0_p Int) (time Int))
  (! (=> (and (tr5152 input0 var1 time)
              (distinct input0 1)
              true
              (not (distinct input0_p 1))
              (not (= input0_p 1)))
         (tr5252 input0_p (+ var1 1) (+ time 1)))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (input0_p Int) (time Int))
  (! (=> (and (tr5253 input0 var1 time)
              (distinct input0 1)
              (distinct input0_p 1))
         (tr5354 input0_p (+ var1 1) (+ time 1)))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (input0_p Int) (time Int))
  (! (=> (and (tr5253 input0 var1 time) (distinct input0 1) (= input0_p 1))
         (tr533 input0_p (+ var1 1) (+ time 1)))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (input0_p Int) (time Int))
  (! (=> (and (tr5253 input0 var1 time)
              (distinct input0 1)
              true
              (not (distinct input0_p 1))
              (not (= input0_p 1)))
         (tr5353 input0_p (+ var1 1) (+ time 1)))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (input0_p Int) (time Int))
  (! (=> (and (tr5354 input0 var1 time)
              (distinct input0 1)
              (distinct input0_p 1))
         (tr5455 input0_p (+ var1 1) (+ time 1)))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (input0_p Int) (time Int))
  (! (=> (and (tr5354 input0 var1 time) (distinct input0 1) (= input0_p 1))
         (tr543 input0_p (+ var1 1) (+ time 1)))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (input0_p Int) (time Int))
  (! (=> (and (tr5354 input0 var1 time)
              (distinct input0 1)
              true
              (not (distinct input0_p 1))
              (not (= input0_p 1)))
         (tr5454 input0_p (+ var1 1) (+ time 1)))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (input0_p Int) (time Int))
  (! (=> (and (tr5455 input0 var1 time)
              (distinct input0 1)
              (distinct input0_p 1))
         (tr5556 input0_p (+ var1 1) (+ time 1)))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (input0_p Int) (time Int))
  (! (=> (and (tr5455 input0 var1 time) (distinct input0 1) (= input0_p 1))
         (tr553 input0_p (+ var1 1) (+ time 1)))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (input0_p Int) (time Int))
  (! (=> (and (tr5455 input0 var1 time)
              (distinct input0 1)
              true
              (not (distinct input0_p 1))
              (not (= input0_p 1)))
         (tr5555 input0_p (+ var1 1) (+ time 1)))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (input0_p Int) (time Int))
  (! (=> (and (tr5556 input0 var1 time)
              (distinct input0 1)
              (distinct input0_p 1))
         (tr5657 input0_p (+ var1 1) (+ time 1)))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (input0_p Int) (time Int))
  (! (=> (and (tr5556 input0 var1 time) (distinct input0 1) (= input0_p 1))
         (tr563 input0_p (+ var1 1) (+ time 1)))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (input0_p Int) (time Int))
  (! (=> (and (tr5556 input0 var1 time)
              (distinct input0 1)
              true
              (not (distinct input0_p 1))
              (not (= input0_p 1)))
         (tr5656 input0_p (+ var1 1) (+ time 1)))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (input0_p Int) (time Int))
  (! (=> (and (tr5657 input0 var1 time)
              (distinct input0 1)
              (distinct input0_p 1))
         (tr5758 input0_p (+ var1 1) (+ time 1)))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (input0_p Int) (time Int))
  (! (=> (and (tr5657 input0 var1 time) (distinct input0 1) (= input0_p 1))
         (tr573 input0_p (+ var1 1) (+ time 1)))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (input0_p Int) (time Int))
  (! (=> (and (tr5657 input0 var1 time)
              (distinct input0 1)
              true
              (not (distinct input0_p 1))
              (not (= input0_p 1)))
         (tr5757 input0_p (+ var1 1) (+ time 1)))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (input0_p Int) (time Int))
  (! (=> (and (tr5758 input0 var1 time)
              (distinct input0 1)
              (distinct input0_p 1))
         (tr5859 input0_p (+ var1 1) (+ time 1)))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (input0_p Int) (time Int))
  (! (=> (and (tr5758 input0 var1 time) (distinct input0 1) (= input0_p 1))
         (tr583 input0_p (+ var1 1) (+ time 1)))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (input0_p Int) (time Int))
  (! (=> (and (tr5758 input0 var1 time)
              (distinct input0 1)
              true
              (not (distinct input0_p 1))
              (not (= input0_p 1)))
         (tr5858 input0_p (+ var1 1) (+ time 1)))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (input0_p Int) (time Int))
  (! (=> (and (tr5859 input0 var1 time)
              (distinct input0 1)
              (distinct input0_p 1))
         (tr5960 input0_p (+ var1 1) (+ time 1)))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (input0_p Int) (time Int))
  (! (=> (and (tr5859 input0 var1 time) (distinct input0 1) (= input0_p 1))
         (tr593 input0_p (+ var1 1) (+ time 1)))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (input0_p Int) (time Int))
  (! (=> (and (tr5859 input0 var1 time)
              (distinct input0 1)
              true
              (not (distinct input0_p 1))
              (not (= input0_p 1)))
         (tr5959 input0_p (+ var1 1) (+ time 1)))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (input0_p Int) (time Int))
  (! (=> (and (tr5960 input0 var1 time)
              (distinct input0 1)
              (distinct input0_p 1))
         (tr6061 input0_p (+ var1 1) (+ time 1)))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (input0_p Int) (time Int))
  (! (=> (and (tr5960 input0 var1 time) (distinct input0 1) (= input0_p 1))
         (tr603 input0_p (+ var1 1) (+ time 1)))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (input0_p Int) (time Int))
  (! (=> (and (tr5960 input0 var1 time)
              (distinct input0 1)
              true
              (not (distinct input0_p 1))
              (not (= input0_p 1)))
         (tr6060 input0_p (+ var1 1) (+ time 1)))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (input0_p Int) (time Int))
  (! (=> (and (tr6061 input0 var1 time)
              (distinct input0 1)
              (distinct input0_p 1))
         (tr6162 input0_p (+ var1 1) (+ time 1)))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (input0_p Int) (time Int))
  (! (=> (and (tr6061 input0 var1 time) (distinct input0 1) (= input0_p 1))
         (tr613 input0_p (+ var1 1) (+ time 1)))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (input0_p Int) (time Int))
  (! (=> (and (tr6061 input0 var1 time)
              (distinct input0 1)
              true
              (not (distinct input0_p 1))
              (not (= input0_p 1)))
         (tr6161 input0_p (+ var1 1) (+ time 1)))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (input0_p Int) (time Int))
  (! (=> (and (tr6162 input0 var1 time)
              (distinct input0 1)
              (distinct input0_p 1))
         (tr6263 input0_p (+ var1 1) (+ time 1)))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (input0_p Int) (time Int))
  (! (=> (and (tr6162 input0 var1 time) (distinct input0 1) (= input0_p 1))
         (tr623 input0_p (+ var1 1) (+ time 1)))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (input0_p Int) (time Int))
  (! (=> (and (tr6162 input0 var1 time)
              (distinct input0 1)
              true
              (not (distinct input0_p 1))
              (not (= input0_p 1)))
         (tr6262 input0_p (+ var1 1) (+ time 1)))
     :weight 0)))

; 
(set-info :status unknown)
(declare-fun var1_0 (Int) Int)
(declare-fun input-arg0 (Int) Int)
(declare-fun time-to-state (Int) Int)
(assert
 (let (($x14 (= (var1_0 0) 0)))
 (let (($x11 (= (input-arg0 0) 0)))
 (let (($x9 (= (time-to-state 0) 0)))
 (let (($x12 (and $x9 $x11)))
 (and $x12 $x14))))))
(assert
 (forall ((time Int) )(let (($x54 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (=> (and (= (time-to-state time) 0) (and (distinct (input-arg0 time) 0) true)) (and (= (time-to-state (+ time 1)) 1) $x54))))
 )
(assert
 (forall ((time Int) )(let ((?x52 (+ time 1)))
 (let ((?x55 (time-to-state ?x52)))
 (let (($x76 (= ?x55 2)))
 (let ((?x58 (input-arg0 time)))
 (let (($x77 (= ?x58 1)))
 (let ((?x60 (time-to-state time)))
 (let (($x61 (= ?x60 0)))
 (let (($x78 (and $x61 $x77)))
 (=> $x78 $x76))))))))))
 )
(assert
 (forall ((time Int) )(let (($x54 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (=> (and (= (time-to-state time) 1) (and (distinct (input-arg0 time) 0) true)) (and (= (time-to-state (+ time 1)) 3) $x54))))
 )
(assert
 (forall ((time Int) )(let ((?x52 (+ time 1)))
 (let ((?x55 (time-to-state ?x52)))
 (let (($x76 (= ?x55 2)))
 (let ((?x58 (input-arg0 time)))
 (let (($x77 (= ?x58 1)))
 (let ((?x60 (time-to-state time)))
 (let (($x93 (= ?x60 1)))
 (let (($x98 (and $x93 $x77)))
 (=> $x98 $x76))))))))))
 )
(assert
 (forall ((time Int) )(let (($x54 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (=> (and (= (time-to-state time) 3) (and (distinct (input-arg0 time) 0) true)) (and (= (time-to-state (+ time 1)) 4) $x54))))
 )
(assert
 (forall ((time Int) )(let ((?x52 (+ time 1)))
 (let ((?x55 (time-to-state ?x52)))
 (let (($x76 (= ?x55 2)))
 (let ((?x58 (input-arg0 time)))
 (let (($x77 (= ?x58 1)))
 (let ((?x60 (time-to-state time)))
 (let (($x112 (= ?x60 3)))
 (let (($x117 (and $x112 $x77)))
 (=> $x117 $x76))))))))))
 )
(assert
 (forall ((time Int) )(let (($x54 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (=> (and (= (time-to-state time) 4) (and (distinct (input-arg0 time) 0) true)) (and (= (time-to-state (+ time 1)) 5) $x54))))
 )
(assert
 (forall ((time Int) )(let ((?x52 (+ time 1)))
 (let ((?x55 (time-to-state ?x52)))
 (let (($x76 (= ?x55 2)))
 (let ((?x58 (input-arg0 time)))
 (let (($x77 (= ?x58 1)))
 (let ((?x60 (time-to-state time)))
 (let (($x131 (= ?x60 4)))
 (let (($x136 (and $x131 $x77)))
 (=> $x136 $x76))))))))))
 )
(assert
 (forall ((time Int) )(let (($x54 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (=> (and (= (time-to-state time) 5) (and (distinct (input-arg0 time) 0) true)) (and (= (time-to-state (+ time 1)) 6) $x54))))
 )
(assert
 (forall ((time Int) )(let ((?x52 (+ time 1)))
 (let ((?x55 (time-to-state ?x52)))
 (let (($x76 (= ?x55 2)))
 (let ((?x58 (input-arg0 time)))
 (let (($x77 (= ?x58 1)))
 (let ((?x60 (time-to-state time)))
 (let (($x150 (= ?x60 5)))
 (let (($x155 (and $x150 $x77)))
 (=> $x155 $x76))))))))))
 )
(assert
 (forall ((time Int) )(let (($x54 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (=> (and (= (time-to-state time) 6) (and (distinct (input-arg0 time) 0) true)) (and (= (time-to-state (+ time 1)) 7) $x54))))
 )
(assert
 (forall ((time Int) )(let ((?x52 (+ time 1)))
 (let ((?x55 (time-to-state ?x52)))
 (let (($x76 (= ?x55 2)))
 (let ((?x58 (input-arg0 time)))
 (let (($x77 (= ?x58 1)))
 (let ((?x60 (time-to-state time)))
 (let (($x169 (= ?x60 6)))
 (let (($x174 (and $x169 $x77)))
 (=> $x174 $x76))))))))))
 )
(assert
 (forall ((time Int) )(let (($x54 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (=> (and (= (time-to-state time) 7) (and (distinct (input-arg0 time) 0) true)) (and (= (time-to-state (+ time 1)) 8) $x54))))
 )
(assert
 (forall ((time Int) )(let ((?x52 (+ time 1)))
 (let ((?x55 (time-to-state ?x52)))
 (let (($x76 (= ?x55 2)))
 (let ((?x58 (input-arg0 time)))
 (let (($x77 (= ?x58 1)))
 (let ((?x60 (time-to-state time)))
 (let (($x188 (= ?x60 7)))
 (let (($x193 (and $x188 $x77)))
 (=> $x193 $x76))))))))))
 )
(assert
 (forall ((time Int) )(let (($x54 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (=> (and (= (time-to-state time) 8) (and (distinct (input-arg0 time) 0) true)) (and (= (time-to-state (+ time 1)) 9) $x54))))
 )
(assert
 (forall ((time Int) )(let ((?x52 (+ time 1)))
 (let ((?x55 (time-to-state ?x52)))
 (let (($x76 (= ?x55 2)))
 (let ((?x58 (input-arg0 time)))
 (let (($x77 (= ?x58 1)))
 (let ((?x60 (time-to-state time)))
 (let (($x207 (= ?x60 8)))
 (let (($x212 (and $x207 $x77)))
 (=> $x212 $x76))))))))))
 )
(assert
 (forall ((time Int) )(let (($x54 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (=> (and (= (time-to-state time) 9) (and (distinct (input-arg0 time) 0) true)) (and (= (time-to-state (+ time 1)) 10) $x54))))
 )
(assert
 (forall ((time Int) )(let ((?x52 (+ time 1)))
 (let ((?x55 (time-to-state ?x52)))
 (let (($x76 (= ?x55 2)))
 (let ((?x58 (input-arg0 time)))
 (let (($x77 (= ?x58 1)))
 (let ((?x60 (time-to-state time)))
 (let (($x226 (= ?x60 9)))
 (let (($x231 (and $x226 $x77)))
 (=> $x231 $x76))))))))))
 )
(assert
 (forall ((time Int) )(let (($x54 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (=> (and (= (time-to-state time) 10) (and (distinct (input-arg0 time) 0) true)) (and (= (time-to-state (+ time 1)) 11) $x54))))
 )
(assert
 (forall ((time Int) )(let ((?x52 (+ time 1)))
 (let ((?x55 (time-to-state ?x52)))
 (let (($x76 (= ?x55 2)))
 (let ((?x58 (input-arg0 time)))
 (let (($x77 (= ?x58 1)))
 (let ((?x60 (time-to-state time)))
 (let (($x245 (= ?x60 10)))
 (let (($x250 (and $x245 $x77)))
 (=> $x250 $x76))))))))))
 )
(assert
 (forall ((time Int) )(let (($x54 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (=> (and (= (time-to-state time) 11) (and (distinct (input-arg0 time) 0) true)) (and (= (time-to-state (+ time 1)) 12) $x54))))
 )
(assert
 (forall ((time Int) )(let ((?x52 (+ time 1)))
 (let ((?x55 (time-to-state ?x52)))
 (let (($x76 (= ?x55 2)))
 (let ((?x58 (input-arg0 time)))
 (let (($x77 (= ?x58 1)))
 (let ((?x60 (time-to-state time)))
 (let (($x264 (= ?x60 11)))
 (let (($x269 (and $x264 $x77)))
 (=> $x269 $x76))))))))))
 )
(assert
 (forall ((time Int) )(let (($x54 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (=> (and (= (time-to-state time) 12) (and (distinct (input-arg0 time) 0) true)) (and (= (time-to-state (+ time 1)) 13) $x54))))
 )
(assert
 (forall ((time Int) )(let ((?x52 (+ time 1)))
 (let ((?x55 (time-to-state ?x52)))
 (let (($x76 (= ?x55 2)))
 (let ((?x58 (input-arg0 time)))
 (let (($x77 (= ?x58 1)))
 (let ((?x60 (time-to-state time)))
 (let (($x283 (= ?x60 12)))
 (let (($x288 (and $x283 $x77)))
 (=> $x288 $x76))))))))))
 )
(assert
 (forall ((time Int) )(let (($x54 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (=> (and (= (time-to-state time) 13) (and (distinct (input-arg0 time) 0) true)) (and (= (time-to-state (+ time 1)) 14) $x54))))
 )
(assert
 (forall ((time Int) )(let ((?x52 (+ time 1)))
 (let ((?x55 (time-to-state ?x52)))
 (let (($x76 (= ?x55 2)))
 (let ((?x58 (input-arg0 time)))
 (let (($x77 (= ?x58 1)))
 (let ((?x60 (time-to-state time)))
 (let (($x302 (= ?x60 13)))
 (let (($x307 (and $x302 $x77)))
 (=> $x307 $x76))))))))))
 )
(assert
 (forall ((time Int) )(let (($x54 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (=> (and (= (time-to-state time) 14) (and (distinct (input-arg0 time) 0) true)) (and (= (time-to-state (+ time 1)) 15) $x54))))
 )
(assert
 (forall ((time Int) )(let ((?x52 (+ time 1)))
 (let ((?x55 (time-to-state ?x52)))
 (let (($x76 (= ?x55 2)))
 (let ((?x58 (input-arg0 time)))
 (let (($x77 (= ?x58 1)))
 (let ((?x60 (time-to-state time)))
 (let (($x321 (= ?x60 14)))
 (let (($x326 (and $x321 $x77)))
 (=> $x326 $x76))))))))))
 )
(assert
 (forall ((time Int) )(let (($x54 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (=> (and (= (time-to-state time) 15) (and (distinct (input-arg0 time) 0) true)) (and (= (time-to-state (+ time 1)) 16) $x54))))
 )
(assert
 (forall ((time Int) )(let ((?x52 (+ time 1)))
 (let ((?x55 (time-to-state ?x52)))
 (let (($x76 (= ?x55 2)))
 (let ((?x58 (input-arg0 time)))
 (let (($x77 (= ?x58 1)))
 (let ((?x60 (time-to-state time)))
 (let (($x340 (= ?x60 15)))
 (let (($x345 (and $x340 $x77)))
 (=> $x345 $x76))))))))))
 )
(assert
 (forall ((time Int) )(let (($x54 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (=> (and (= (time-to-state time) 16) (and (distinct (input-arg0 time) 0) true)) (and (= (time-to-state (+ time 1)) 17) $x54))))
 )
(assert
 (forall ((time Int) )(let ((?x52 (+ time 1)))
 (let ((?x55 (time-to-state ?x52)))
 (let (($x76 (= ?x55 2)))
 (let ((?x58 (input-arg0 time)))
 (let (($x77 (= ?x58 1)))
 (let ((?x60 (time-to-state time)))
 (let (($x359 (= ?x60 16)))
 (let (($x364 (and $x359 $x77)))
 (=> $x364 $x76))))))))))
 )
(assert
 (forall ((time Int) )(let (($x54 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (=> (and (= (time-to-state time) 17) (and (distinct (input-arg0 time) 0) true)) (and (= (time-to-state (+ time 1)) 18) $x54))))
 )
(assert
 (forall ((time Int) )(let ((?x52 (+ time 1)))
 (let ((?x55 (time-to-state ?x52)))
 (let (($x76 (= ?x55 2)))
 (let ((?x58 (input-arg0 time)))
 (let (($x77 (= ?x58 1)))
 (let ((?x60 (time-to-state time)))
 (let (($x378 (= ?x60 17)))
 (let (($x383 (and $x378 $x77)))
 (=> $x383 $x76))))))))))
 )
(assert
 (forall ((time Int) )(let (($x54 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (=> (and (= (time-to-state time) 18) (and (distinct (input-arg0 time) 0) true)) (and (= (time-to-state (+ time 1)) 19) $x54))))
 )
(assert
 (forall ((time Int) )(let ((?x52 (+ time 1)))
 (let ((?x55 (time-to-state ?x52)))
 (let (($x76 (= ?x55 2)))
 (let ((?x58 (input-arg0 time)))
 (let (($x77 (= ?x58 1)))
 (let ((?x60 (time-to-state time)))
 (let (($x397 (= ?x60 18)))
 (let (($x402 (and $x397 $x77)))
 (=> $x402 $x76))))))))))
 )
(assert
 (forall ((time Int) )(let (($x54 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (=> (and (= (time-to-state time) 19) (and (distinct (input-arg0 time) 0) true)) (and (= (time-to-state (+ time 1)) 20) $x54))))
 )
(assert
 (forall ((time Int) )(let ((?x52 (+ time 1)))
 (let ((?x55 (time-to-state ?x52)))
 (let (($x76 (= ?x55 2)))
 (let ((?x58 (input-arg0 time)))
 (let (($x77 (= ?x58 1)))
 (let ((?x60 (time-to-state time)))
 (let (($x416 (= ?x60 19)))
 (let (($x421 (and $x416 $x77)))
 (=> $x421 $x76))))))))))
 )
(assert
 (forall ((time Int) )(let (($x54 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (=> (and (= (time-to-state time) 20) (and (distinct (input-arg0 time) 0) true)) (and (= (time-to-state (+ time 1)) 21) $x54))))
 )
(assert
 (forall ((time Int) )(let ((?x52 (+ time 1)))
 (let ((?x55 (time-to-state ?x52)))
 (let (($x76 (= ?x55 2)))
 (let ((?x58 (input-arg0 time)))
 (let (($x77 (= ?x58 1)))
 (let ((?x60 (time-to-state time)))
 (let (($x435 (= ?x60 20)))
 (let (($x440 (and $x435 $x77)))
 (=> $x440 $x76))))))))))
 )
(assert
 (forall ((time Int) )(let (($x54 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (=> (and (= (time-to-state time) 21) (and (distinct (input-arg0 time) 0) true)) (and (= (time-to-state (+ time 1)) 22) $x54))))
 )
(assert
 (forall ((time Int) )(let ((?x52 (+ time 1)))
 (let ((?x55 (time-to-state ?x52)))
 (let (($x76 (= ?x55 2)))
 (let ((?x58 (input-arg0 time)))
 (let (($x77 (= ?x58 1)))
 (let ((?x60 (time-to-state time)))
 (let (($x454 (= ?x60 21)))
 (let (($x459 (and $x454 $x77)))
 (=> $x459 $x76))))))))))
 )
(assert
 (forall ((time Int) )(let (($x54 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (=> (and (= (time-to-state time) 22) (and (distinct (input-arg0 time) 0) true)) (and (= (time-to-state (+ time 1)) 23) $x54))))
 )
(assert
 (forall ((time Int) )(let ((?x52 (+ time 1)))
 (let ((?x55 (time-to-state ?x52)))
 (let (($x76 (= ?x55 2)))
 (let ((?x58 (input-arg0 time)))
 (let (($x77 (= ?x58 1)))
 (let ((?x60 (time-to-state time)))
 (let (($x473 (= ?x60 22)))
 (let (($x478 (and $x473 $x77)))
 (=> $x478 $x76))))))))))
 )
(assert
 (forall ((time Int) )(let (($x54 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (=> (and (= (time-to-state time) 23) (and (distinct (input-arg0 time) 0) true)) (and (= (time-to-state (+ time 1)) 24) $x54))))
 )
(assert
 (forall ((time Int) )(let ((?x52 (+ time 1)))
 (let ((?x55 (time-to-state ?x52)))
 (let (($x76 (= ?x55 2)))
 (let ((?x58 (input-arg0 time)))
 (let (($x77 (= ?x58 1)))
 (let ((?x60 (time-to-state time)))
 (let (($x492 (= ?x60 23)))
 (let (($x497 (and $x492 $x77)))
 (=> $x497 $x76))))))))))
 )
(assert
 (forall ((time Int) )(let (($x54 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (=> (and (= (time-to-state time) 24) (and (distinct (input-arg0 time) 0) true)) (and (= (time-to-state (+ time 1)) 25) $x54))))
 )
(assert
 (forall ((time Int) )(let ((?x52 (+ time 1)))
 (let ((?x55 (time-to-state ?x52)))
 (let (($x76 (= ?x55 2)))
 (let ((?x58 (input-arg0 time)))
 (let (($x77 (= ?x58 1)))
 (let ((?x60 (time-to-state time)))
 (let (($x511 (= ?x60 24)))
 (let (($x516 (and $x511 $x77)))
 (=> $x516 $x76))))))))))
 )
(assert
 (forall ((time Int) )(let (($x54 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (=> (and (= (time-to-state time) 25) (and (distinct (input-arg0 time) 0) true)) (and (= (time-to-state (+ time 1)) 26) $x54))))
 )
(assert
 (forall ((time Int) )(let ((?x52 (+ time 1)))
 (let ((?x55 (time-to-state ?x52)))
 (let (($x76 (= ?x55 2)))
 (let ((?x58 (input-arg0 time)))
 (let (($x77 (= ?x58 1)))
 (let ((?x60 (time-to-state time)))
 (let (($x530 (= ?x60 25)))
 (let (($x535 (and $x530 $x77)))
 (=> $x535 $x76))))))))))
 )
(assert
 (forall ((time Int) )(let (($x54 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (=> (and (= (time-to-state time) 26) (and (distinct (input-arg0 time) 0) true)) (and (= (time-to-state (+ time 1)) 27) $x54))))
 )
(assert
 (forall ((time Int) )(let ((?x52 (+ time 1)))
 (let ((?x55 (time-to-state ?x52)))
 (let (($x76 (= ?x55 2)))
 (let ((?x58 (input-arg0 time)))
 (let (($x77 (= ?x58 1)))
 (let ((?x60 (time-to-state time)))
 (let (($x549 (= ?x60 26)))
 (let (($x554 (and $x549 $x77)))
 (=> $x554 $x76))))))))))
 )
(assert
 (forall ((time Int) )(let (($x54 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (=> (and (= (time-to-state time) 27) (and (distinct (input-arg0 time) 0) true)) (and (= (time-to-state (+ time 1)) 28) $x54))))
 )
(assert
 (forall ((time Int) )(let ((?x52 (+ time 1)))
 (let ((?x55 (time-to-state ?x52)))
 (let (($x76 (= ?x55 2)))
 (let ((?x58 (input-arg0 time)))
 (let (($x77 (= ?x58 1)))
 (let ((?x60 (time-to-state time)))
 (let (($x568 (= ?x60 27)))
 (let (($x573 (and $x568 $x77)))
 (=> $x573 $x76))))))))))
 )
(assert
 (forall ((time Int) )(let (($x54 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (=> (and (= (time-to-state time) 28) (and (distinct (input-arg0 time) 0) true)) (and (= (time-to-state (+ time 1)) 29) $x54))))
 )
(assert
 (forall ((time Int) )(let ((?x52 (+ time 1)))
 (let ((?x55 (time-to-state ?x52)))
 (let (($x76 (= ?x55 2)))
 (let ((?x58 (input-arg0 time)))
 (let (($x77 (= ?x58 1)))
 (let ((?x60 (time-to-state time)))
 (let (($x587 (= ?x60 28)))
 (let (($x592 (and $x587 $x77)))
 (=> $x592 $x76))))))))))
 )
(assert
 (forall ((time Int) )(let (($x54 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (=> (and (= (time-to-state time) 29) (and (distinct (input-arg0 time) 0) true)) (and (= (time-to-state (+ time 1)) 30) $x54))))
 )
(assert
 (forall ((time Int) )(let ((?x52 (+ time 1)))
 (let ((?x55 (time-to-state ?x52)))
 (let (($x76 (= ?x55 2)))
 (let ((?x58 (input-arg0 time)))
 (let (($x77 (= ?x58 1)))
 (let ((?x60 (time-to-state time)))
 (let (($x606 (= ?x60 29)))
 (let (($x611 (and $x606 $x77)))
 (=> $x611 $x76))))))))))
 )
(assert
 (forall ((time Int) )(let (($x54 (= (var1_0 (+ time 1)) (+ (var1_0 time) 1))))
 (=> (and (= (time-to-state time) 30) (and (distinct (input-arg0 time) 0) true)) (and (= (time-to-state (+ time 1)) 31) $x54))))
 )
(assert
 (forall ((time Int) )(let ((?x52 (+ time 1)))
 (let ((?x55 (time-to-state ?x52)))
 (let (($x76 (= ?x55 2)))
 (let ((?x58 (input-arg0 time)))
 (let (($x77 (= ?x58 1)))
 (let ((?x60 (time-to-state time)))
 (let (($x625 (= ?x60 30)))
 (let (($x630 (and $x625 $x77)))
 (=> $x630 $x76))))))))))
 )
(assert
 (forall ((time Int) )(exists ((time Int) )(and (and (>= time 0) (< time 61)) (and (distinct (= (time-to-state time) 30) (= (input-arg0 time) 29)) true)))
 )
 )
(check-sat)

; 
(set-info :status unknown)
(declare-fun _0 ((_ BitVec 16) (_ BitVec 32)) Bool)
(declare-fun time () (_ BitVec 32))
(declare-fun _1 ((_ BitVec 16) (_ BitVec 32)) Bool)
(declare-fun _2 ((_ BitVec 16) (_ BitVec 32)) Bool)
(declare-fun _3 ((_ BitVec 16) (_ BitVec 32)) Bool)
(declare-fun _4 ((_ BitVec 16) (_ BitVec 32)) Bool)
(declare-fun _5 ((_ BitVec 16) (_ BitVec 32)) Bool)
(assert
 (forall ((arg0 (_ BitVec 16)) )(_0 (_ bv0 16) time))
 )
(assert
 (forall ((time (_ BitVec 32)) )(let (($x54 (forall ((arg0 (_ BitVec 16)) )(let (($x52 (_0 arg0 time)))
 (=> $x52 (_1 (bvadd arg0 (_ bv1 16)) (bvadd time (_ bv1 32))))))
 ))
 (let (($x57 (and (bvsge time (_ bv0 32)) (bvslt time (_ bv100 32)))))
 (=> $x57 $x54))))
 )
(assert
 (forall ((time (_ BitVec 32)) )(let (($x76 (forall ((arg0 (_ BitVec 16)) )(let (($x74 (_1 arg0 time)))
 (=> $x74 (_2 (bvadd arg0 (_ bv1 16)) (bvadd time (_ bv1 32))))))
 ))
 (let (($x57 (and (bvsge time (_ bv0 32)) (bvslt time (_ bv100 32)))))
 (=> $x57 $x76))))
 )
(assert
 (forall ((time (_ BitVec 32)) )(let (($x88 (forall ((arg0 (_ BitVec 16)) )(let (($x86 (_2 arg0 time)))
 (=> $x86 (_3 (bvadd arg0 (_ bv1 16)) (bvadd time (_ bv1 32))))))
 ))
 (let (($x57 (and (bvsge time (_ bv0 32)) (bvslt time (_ bv100 32)))))
 (=> $x57 $x88))))
 )
(assert
 (forall ((time (_ BitVec 32)) )(let (($x100 (forall ((arg0 (_ BitVec 16)) )(let (($x98 (_3 arg0 time)))
 (=> $x98 (_4 (bvadd arg0 (_ bv1 16)) (bvadd time (_ bv1 32))))))
 ))
 (let (($x57 (and (bvsge time (_ bv0 32)) (bvslt time (_ bv100 32)))))
 (=> $x57 $x100))))
 )
(assert
 (forall ((time (_ BitVec 32)) )(let (($x112 (forall ((arg0 (_ BitVec 16)) )(let (($x110 (_4 arg0 time)))
 (=> $x110 (_5 (bvadd arg0 (_ bv1 16)) (bvadd time (_ bv1 32))))))
 ))
 (let (($x57 (and (bvsge time (_ bv0 32)) (bvslt time (_ bv100 32)))))
 (=> $x57 $x112))))
 )
(assert
 (exists ((time (_ BitVec 32)) )(forall ((arg0 (_ BitVec 16)) )(let (($x52 (_0 arg0 time)))
 (and $x52 (and (distinct arg0 (_ bv0 16)) true))))
 )
 )
(check-sat)


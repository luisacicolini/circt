(set-logic HORN)
(declare-fun F__0 (Int) Bool)
(declare-fun F__1 (Int) Bool)
(declare-fun F__2 (Int) Bool)
(declare-fun F__3 (Int) Bool)
(declare-fun F__4 (Int) Bool)
(declare-fun F__5 (Int) Bool)
(declare-fun F__6 (Int) Bool)
(declare-fun F__7 (Int) Bool)
(declare-fun F__8 (Int) Bool)
(declare-fun F__9 (Int) Bool)
(declare-fun F__10 (Int) Bool)
(assert (forall ((tmp Int))
        (F__0 0)))
(assert (forall ((tmp_0 Int))
        (=> (and (F__0 tmp_0) true) (F__1 (mod (+ tmp_0 1) 65536)))))
(assert (forall ((tmp_1 Int))
        (=> (and (F__1 tmp_1) true) (F__2 (mod (+ tmp_1 1) 65536)))))
(assert (forall ((tmp_2 Int))
        (=> (and (F__2 tmp_2) true) (F__3 (mod (+ tmp_2 1) 65536)))))
(assert (forall ((tmp_3 Int))
        (=> (and (F__3 tmp_3) true) (F__4 (mod (+ tmp_3 1) 65536)))))
(assert (forall ((tmp_4 Int))
        (=> (and (F__4 tmp_4) true) (F__5 (mod (+ tmp_4 1) 65536)))))
(assert (forall ((tmp_5 Int))
        (=> (and (F__5 tmp_5) true) (F__6 (mod (+ tmp_5 1) 65536)))))
(assert (forall ((tmp_6 Int))
        (=> (and (F__6 tmp_6) true) (F__7 (mod (+ tmp_6 1) 65536)))))
(assert (forall ((tmp_7 Int))
        (=> (and (F__7 tmp_7) true) (F__8 (mod (+ tmp_7 1) 65536)))))
(assert (forall ((tmp_8 Int))
        (=> (and (F__8 tmp_8) true) (F__9 (mod (+ tmp_8 1) 65536)))))
(assert (forall ((tmp_9 Int))
        (=> (and (F__9 tmp_9) true) (F__10 (mod (+ tmp_9 1) 65536)))))
(assert (not (and (F__9 1) true)))
(check-sat)

(set-logic HORN)
(declare-fun _0 (Bool Int Int) Bool)
(declare-fun _1 (Bool Int Int) Bool)
(declare-fun _2 (Bool Int Int) Bool)
(declare-fun _3 (Bool Int Int) Bool)
(declare-fun _4 (Bool Int Int) Bool)
(declare-fun input-arg0 (Bool Int) Bool)
(assert (forall ((input0 Bool) (var1 Int) (time Int))
  (! (=> (= time 0) (_0 input0 0 time)) :weight 0)))
(assert (forall ((input0 Bool)
         (var1 Int)
         (time Int)
         (input0_p Bool)
         (var1_p Int)
         (time_p Int))
  (! (=> (and (_0 input0 var1 time)
              true
              (= var1_p (+ var1 1))
              (= (+ time 1) time_p))
         (_1 input0_p var1_p time_p))
     :weight 0)))
(assert (forall ((input0 Bool)
         (var1 Int)
         (time Int)
         (input0_p Bool)
         (var1_p Int)
         (time_p Int))
  (! (=> (and (_1 input0 var1 time)
              true
              (= var1_p (+ var1 1))
              (= (+ time 1) time_p))
         (_2 input0_p var1_p time_p))
     :weight 0)))
(assert (forall ((input0 Bool)
         (var1 Int)
         (time Int)
         (input0_p Bool)
         (var1_p Int)
         (time_p Int))
  (! (=> (and (_2 input0 var1 time)
              (distinct input0 false)
              true
              (= var1_p (+ var1 1))
              true
              (input-arg0 input0_p time_p)
              (= (+ time 1) time_p))
         (_3 input0_p var1_p time_p))
     :weight 0)))
(assert (forall ((input0 Bool)
         (var1 Int)
         (time Int)
         (input0_p Bool)
         (var1_p Int)
         (time_p Int))
  (! (=> (and (_2 input0 var1 time)
              (= input0 false)
              true
              (= var1_p var1)
              true
              (input-arg0 input0_p time_p)
              (= (+ time 1) time_p))
         (_3 input0_p var1_p time_p))
     :weight 0)))
(assert (forall ((input0 Bool)
         (var1 Int)
         (time Int)
         (input0_p Bool)
         (var1_p Int)
         (time_p Int))
  (! (=> (and (_3 input0 var1 time)
              true
              (= var1_p (+ var1 1))
              (= (+ time 1) time_p))
         (_4 input0_p var1_p time_p))
     :weight 0)))
(assert (forall ((input0 Bool)
         (var1 Int)
         (time Int)
         (input0_p Bool)
         (var1_p Int)
         (time_p Int))
  (! (=> (_0 input0 var1 time)
         (and true
              (not (_1 input0_p var1_p time))
              (not (_2 input0_p var1_p time))
              (not (_3 input0_p var1_p time))
              (not (_4 input0_p var1_p time))))
     :weight 0)))
(assert (forall ((input0 Bool)
         (var1 Int)
         (time Int)
         (input0_p Bool)
         (var1_p Int)
         (time_p Int))
  (! (=> (and (_0 input0 var1 time)
              true
              (distinct input0 input0_p)
              (distinct var1 var1_p))
         (not (_0 input0_p var1_p time)))
     :weight 0)))
(assert (forall ((input0 Bool)
         (var1 Int)
         (time Int)
         (input0_p Bool)
         (var1_p Int)
         (time_p Int))
  (! (=> (_1 input0 var1 time)
         (and true
              (not (_0 input0_p var1_p time))
              (not (_2 input0_p var1_p time))
              (not (_3 input0_p var1_p time))
              (not (_4 input0_p var1_p time))))
     :weight 0)))
(assert (forall ((input0 Bool)
         (var1 Int)
         (time Int)
         (input0_p Bool)
         (var1_p Int)
         (time_p Int))
  (! (=> (and (_1 input0 var1 time)
              true
              (distinct input0 input0_p)
              (distinct var1 var1_p))
         (not (_1 input0_p var1_p time)))
     :weight 0)))
(assert (forall ((input0 Bool)
         (var1 Int)
         (time Int)
         (input0_p Bool)
         (var1_p Int)
         (time_p Int))
  (! (=> (_2 input0 var1 time)
         (and true
              (not (_0 input0_p var1_p time))
              (not (_1 input0_p var1_p time))
              (not (_3 input0_p var1_p time))
              (not (_4 input0_p var1_p time))))
     :weight 0)))
(assert (forall ((input0 Bool)
         (var1 Int)
         (time Int)
         (input0_p Bool)
         (var1_p Int)
         (time_p Int))
  (! (=> (and (_2 input0 var1 time)
              true
              (distinct input0 input0_p)
              (distinct var1 var1_p))
         (not (_2 input0_p var1_p time)))
     :weight 0)))
(assert (forall ((input0 Bool)
         (var1 Int)
         (time Int)
         (input0_p Bool)
         (var1_p Int)
         (time_p Int))
  (! (=> (_3 input0 var1 time)
         (and true
              (not (_0 input0_p var1_p time))
              (not (_1 input0_p var1_p time))
              (not (_2 input0_p var1_p time))
              (not (_4 input0_p var1_p time))))
     :weight 0)))
(assert (forall ((input0 Bool)
         (var1 Int)
         (time Int)
         (input0_p Bool)
         (var1_p Int)
         (time_p Int))
  (! (=> (and (_3 input0 var1 time)
              true
              (distinct input0 input0_p)
              (distinct var1 var1_p))
         (not (_3 input0_p var1_p time)))
     :weight 0)))
(assert (forall ((input0 Bool)
         (var1 Int)
         (time Int)
         (input0_p Bool)
         (var1_p Int)
         (time_p Int))
  (! (=> (_4 input0 var1 time)
         (and true
              (not (_0 input0_p var1_p time))
              (not (_1 input0_p var1_p time))
              (not (_2 input0_p var1_p time))
              (not (_3 input0_p var1_p time))))
     :weight 0)))
(assert (forall ((input0 Bool)
         (var1 Int)
         (time Int)
         (input0_p Bool)
         (var1_p Int)
         (time_p Int))
  (! (=> (and (_4 input0 var1 time)
              true
              (distinct input0 input0_p)
              (distinct var1 var1_p))
         (not (_4 input0_p var1_p time)))
     :weight 0)))
(assert (forall ((input0 Bool)
         (var1 Int)
         (time Int)
         (input0_p Bool)
         (var1_p Int)
         (time_p Int))
  (! (=> (_3 input0 var1 time)
         false)
     :weight 0)))
(check-sat)

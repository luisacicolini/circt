(set-logic HORN)
(declare-fun tr01 (Int Int Int) Bool)
(declare-fun tr02 (Int Int Int) Bool)
(declare-fun tr13 (Int Int Int) Bool)
(declare-fun tr12 (Int Int Int) Bool)
(declare-fun tr34 (Int Int Int) Bool)
(declare-fun tr32 (Int Int Int) Bool)
(declare-fun tr45 (Int Int Int) Bool)
(declare-fun tr42 (Int Int Int) Bool)
(declare-fun tr56 (Int Int Int) Bool)
(declare-fun tr52 (Int Int Int) Bool)
(declare-fun tr67 (Int Int Int) Bool)
(declare-fun tr62 (Int Int Int) Bool)
(declare-fun tr78 (Int Int Int) Bool)
(declare-fun tr72 (Int Int Int) Bool)
(declare-fun tr89 (Int Int Int) Bool)
(declare-fun tr82 (Int Int Int) Bool)
(declare-fun tr910 (Int Int Int) Bool)
(declare-fun tr92 (Int Int Int) Bool)
(declare-fun tr1011 (Int Int Int) Bool)
(declare-fun tr102 (Int Int Int) Bool)
(assert (forall ((input0 Int) (var1 Int) (input0_p Int) (time Int))
  (! (=> (= time 0) (tr01 input0 0 time))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (input0_p Int) (time Int))
  (! (=> (and (tr01 input0 var1 time) (distinct input0 1) (distinct input0_p 1))
         (tr13 input0_p (+ var1 1) (+ time 1)))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (input0_p Int) (time Int))
  (! (=> (and (tr01 input0 var1 time) (distinct input0 1) (= input0_p 1))
         (tr12 input0_p (+ var1 1) (+ time 1)))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (input0_p Int) (time Int))
  (! (=> (and (tr13 input0 var1 time) (distinct input0 1) (distinct input0_p 1))
         (tr34 input0_p (+ var1 1) (+ time 1)))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (input0_p Int) (time Int))
  (! (=> (and (tr13 input0 var1 time) (distinct input0 1) (= input0_p 1))
         (tr32 input0_p (+ var1 1) (+ time 1)))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (input0_p Int) (time Int))
  (! (=> (and (tr34 input0 var1 time) (distinct input0 1) (distinct input0_p 1))
         (tr45 input0_p (+ var1 1) (+ time 1)))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (input0_p Int) (time Int))
  (! (=> (and (tr34 input0 var1 time) (distinct input0 1) (= input0_p 1))
         (tr42 input0_p (+ var1 1) (+ time 1)))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (input0_p Int) (time Int))
  (! (=> (and (tr45 input0 var1 time) (distinct input0 1) (distinct input0_p 1))
         (tr56 input0_p (+ var1 1) (+ time 1)))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (input0_p Int) (time Int))
  (! (=> (and (tr45 input0 var1 time) (distinct input0 1) (= input0_p 1))
         (tr52 input0_p (+ var1 1) (+ time 1)))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (input0_p Int) (time Int))
  (! (=> (and (tr56 input0 var1 time) (distinct input0 1) (distinct input0_p 1))
         (tr67 input0_p (+ var1 1) (+ time 1)))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (input0_p Int) (time Int))
  (! (=> (and (tr56 input0 var1 time) (distinct input0 1) (= input0_p 1))
         (tr62 input0_p (+ var1 1) (+ time 1)))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (input0_p Int) (time Int))
  (! (=> (and (tr67 input0 var1 time) (distinct input0 1) (distinct input0_p 1))
         (tr78 input0_p (+ var1 1) (+ time 1)))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (input0_p Int) (time Int))
  (! (=> (and (tr67 input0 var1 time) (distinct input0 1) (= input0_p 1))
         (tr72 input0_p (+ var1 1) (+ time 1)))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (input0_p Int) (time Int))
  (! (=> (and (tr78 input0 var1 time) (distinct input0 1) (distinct input0_p 1))
         (tr89 input0_p (+ var1 1) (+ time 1)))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (input0_p Int) (time Int))
  (! (=> (and (tr78 input0 var1 time) (distinct input0 1) (= input0_p 1))
         (tr82 input0_p (+ var1 1) (+ time 1)))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (input0_p Int) (time Int))
  (! (=> (and (tr89 input0 var1 time) (distinct input0 1) (distinct input0_p 1))
         (tr910 input0_p (+ var1 1) (+ time 1)))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (input0_p Int) (time Int))
  (! (=> (and (tr89 input0 var1 time) (distinct input0 1) (= input0_p 1))
         (tr92 input0_p (+ var1 1) (+ time 1)))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (input0_p Int) (time Int))
  (! (=> (and (tr910 input0 var1 time)
              (distinct input0 1)
              (distinct input0_p 1))
         (tr1011 input0_p (+ var1 1) (+ time 1)))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (input0_p Int) (time Int))
  (! (=> (and (tr910 input0 var1 time) (distinct input0 1) (= input0_p 1))
         (tr102 input0_p (+ var1 1) (+ time 1)))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (time Int))
  (! (=> (tr01 input0 var1 time)
         (and true
              (not (tr02 input0 var1 time))
              (not (tr13 input0 var1 time))
              (not (tr12 input0 var1 time))
              (not (tr34 input0 var1 time))
              (not (tr32 input0 var1 time))
              (not (tr45 input0 var1 time))
              (not (tr42 input0 var1 time))
              (not (tr56 input0 var1 time))
              (not (tr52 input0 var1 time))
              (not (tr67 input0 var1 time))
              (not (tr62 input0 var1 time))
              (not (tr78 input0 var1 time))
              (not (tr72 input0 var1 time))
              (not (tr89 input0 var1 time))
              (not (tr82 input0 var1 time))
              (not (tr910 input0 var1 time))
              (not (tr92 input0 var1 time))
              (not (tr1011 input0 var1 time))
              (not (tr102 input0 var1 time))))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (time Int))
  (! (=> (tr02 input0 var1 time)
         (and true
              (not (tr01 input0 var1 time))
              (not (tr13 input0 var1 time))
              (not (tr12 input0 var1 time))
              (not (tr34 input0 var1 time))
              (not (tr32 input0 var1 time))
              (not (tr45 input0 var1 time))
              (not (tr42 input0 var1 time))
              (not (tr56 input0 var1 time))
              (not (tr52 input0 var1 time))
              (not (tr67 input0 var1 time))
              (not (tr62 input0 var1 time))
              (not (tr78 input0 var1 time))
              (not (tr72 input0 var1 time))
              (not (tr89 input0 var1 time))
              (not (tr82 input0 var1 time))
              (not (tr910 input0 var1 time))
              (not (tr92 input0 var1 time))
              (not (tr1011 input0 var1 time))
              (not (tr102 input0 var1 time))))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (time Int))
  (! (=> (tr13 input0 var1 time)
         (and true
              (not (tr01 input0 var1 time))
              (not (tr02 input0 var1 time))
              (not (tr12 input0 var1 time))
              (not (tr34 input0 var1 time))
              (not (tr32 input0 var1 time))
              (not (tr45 input0 var1 time))
              (not (tr42 input0 var1 time))
              (not (tr56 input0 var1 time))
              (not (tr52 input0 var1 time))
              (not (tr67 input0 var1 time))
              (not (tr62 input0 var1 time))
              (not (tr78 input0 var1 time))
              (not (tr72 input0 var1 time))
              (not (tr89 input0 var1 time))
              (not (tr82 input0 var1 time))
              (not (tr910 input0 var1 time))
              (not (tr92 input0 var1 time))
              (not (tr1011 input0 var1 time))
              (not (tr102 input0 var1 time))))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (time Int))
  (! (=> (tr12 input0 var1 time)
         (and true
              (not (tr01 input0 var1 time))
              (not (tr02 input0 var1 time))
              (not (tr13 input0 var1 time))
              (not (tr34 input0 var1 time))
              (not (tr32 input0 var1 time))
              (not (tr45 input0 var1 time))
              (not (tr42 input0 var1 time))
              (not (tr56 input0 var1 time))
              (not (tr52 input0 var1 time))
              (not (tr67 input0 var1 time))
              (not (tr62 input0 var1 time))
              (not (tr78 input0 var1 time))
              (not (tr72 input0 var1 time))
              (not (tr89 input0 var1 time))
              (not (tr82 input0 var1 time))
              (not (tr910 input0 var1 time))
              (not (tr92 input0 var1 time))
              (not (tr1011 input0 var1 time))
              (not (tr102 input0 var1 time))))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (time Int))
  (! (=> (tr34 input0 var1 time)
         (and true
              (not (tr01 input0 var1 time))
              (not (tr02 input0 var1 time))
              (not (tr13 input0 var1 time))
              (not (tr12 input0 var1 time))
              (not (tr32 input0 var1 time))
              (not (tr45 input0 var1 time))
              (not (tr42 input0 var1 time))
              (not (tr56 input0 var1 time))
              (not (tr52 input0 var1 time))
              (not (tr67 input0 var1 time))
              (not (tr62 input0 var1 time))
              (not (tr78 input0 var1 time))
              (not (tr72 input0 var1 time))
              (not (tr89 input0 var1 time))
              (not (tr82 input0 var1 time))
              (not (tr910 input0 var1 time))
              (not (tr92 input0 var1 time))
              (not (tr1011 input0 var1 time))
              (not (tr102 input0 var1 time))))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (time Int))
  (! (=> (tr32 input0 var1 time)
         (and true
              (not (tr01 input0 var1 time))
              (not (tr02 input0 var1 time))
              (not (tr13 input0 var1 time))
              (not (tr12 input0 var1 time))
              (not (tr34 input0 var1 time))
              (not (tr45 input0 var1 time))
              (not (tr42 input0 var1 time))
              (not (tr56 input0 var1 time))
              (not (tr52 input0 var1 time))
              (not (tr67 input0 var1 time))
              (not (tr62 input0 var1 time))
              (not (tr78 input0 var1 time))
              (not (tr72 input0 var1 time))
              (not (tr89 input0 var1 time))
              (not (tr82 input0 var1 time))
              (not (tr910 input0 var1 time))
              (not (tr92 input0 var1 time))
              (not (tr1011 input0 var1 time))
              (not (tr102 input0 var1 time))))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (time Int))
  (! (=> (tr45 input0 var1 time)
         (and true
              (not (tr01 input0 var1 time))
              (not (tr02 input0 var1 time))
              (not (tr13 input0 var1 time))
              (not (tr12 input0 var1 time))
              (not (tr34 input0 var1 time))
              (not (tr32 input0 var1 time))
              (not (tr42 input0 var1 time))
              (not (tr56 input0 var1 time))
              (not (tr52 input0 var1 time))
              (not (tr67 input0 var1 time))
              (not (tr62 input0 var1 time))
              (not (tr78 input0 var1 time))
              (not (tr72 input0 var1 time))
              (not (tr89 input0 var1 time))
              (not (tr82 input0 var1 time))
              (not (tr910 input0 var1 time))
              (not (tr92 input0 var1 time))
              (not (tr1011 input0 var1 time))
              (not (tr102 input0 var1 time))))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (time Int))
  (! (=> (tr42 input0 var1 time)
         (and true
              (not (tr01 input0 var1 time))
              (not (tr02 input0 var1 time))
              (not (tr13 input0 var1 time))
              (not (tr12 input0 var1 time))
              (not (tr34 input0 var1 time))
              (not (tr32 input0 var1 time))
              (not (tr45 input0 var1 time))
              (not (tr56 input0 var1 time))
              (not (tr52 input0 var1 time))
              (not (tr67 input0 var1 time))
              (not (tr62 input0 var1 time))
              (not (tr78 input0 var1 time))
              (not (tr72 input0 var1 time))
              (not (tr89 input0 var1 time))
              (not (tr82 input0 var1 time))
              (not (tr910 input0 var1 time))
              (not (tr92 input0 var1 time))
              (not (tr1011 input0 var1 time))
              (not (tr102 input0 var1 time))))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (time Int))
  (! (=> (tr56 input0 var1 time)
         (and true
              (not (tr01 input0 var1 time))
              (not (tr02 input0 var1 time))
              (not (tr13 input0 var1 time))
              (not (tr12 input0 var1 time))
              (not (tr34 input0 var1 time))
              (not (tr32 input0 var1 time))
              (not (tr45 input0 var1 time))
              (not (tr42 input0 var1 time))
              (not (tr52 input0 var1 time))
              (not (tr67 input0 var1 time))
              (not (tr62 input0 var1 time))
              (not (tr78 input0 var1 time))
              (not (tr72 input0 var1 time))
              (not (tr89 input0 var1 time))
              (not (tr82 input0 var1 time))
              (not (tr910 input0 var1 time))
              (not (tr92 input0 var1 time))
              (not (tr1011 input0 var1 time))
              (not (tr102 input0 var1 time))))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (time Int))
  (! (=> (tr52 input0 var1 time)
         (and true
              (not (tr01 input0 var1 time))
              (not (tr02 input0 var1 time))
              (not (tr13 input0 var1 time))
              (not (tr12 input0 var1 time))
              (not (tr34 input0 var1 time))
              (not (tr32 input0 var1 time))
              (not (tr45 input0 var1 time))
              (not (tr42 input0 var1 time))
              (not (tr56 input0 var1 time))
              (not (tr67 input0 var1 time))
              (not (tr62 input0 var1 time))
              (not (tr78 input0 var1 time))
              (not (tr72 input0 var1 time))
              (not (tr89 input0 var1 time))
              (not (tr82 input0 var1 time))
              (not (tr910 input0 var1 time))
              (not (tr92 input0 var1 time))
              (not (tr1011 input0 var1 time))
              (not (tr102 input0 var1 time))))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (time Int))
  (! (=> (tr67 input0 var1 time)
         (and true
              (not (tr01 input0 var1 time))
              (not (tr02 input0 var1 time))
              (not (tr13 input0 var1 time))
              (not (tr12 input0 var1 time))
              (not (tr34 input0 var1 time))
              (not (tr32 input0 var1 time))
              (not (tr45 input0 var1 time))
              (not (tr42 input0 var1 time))
              (not (tr56 input0 var1 time))
              (not (tr52 input0 var1 time))
              (not (tr62 input0 var1 time))
              (not (tr78 input0 var1 time))
              (not (tr72 input0 var1 time))
              (not (tr89 input0 var1 time))
              (not (tr82 input0 var1 time))
              (not (tr910 input0 var1 time))
              (not (tr92 input0 var1 time))
              (not (tr1011 input0 var1 time))
              (not (tr102 input0 var1 time))))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (time Int))
  (! (=> (tr62 input0 var1 time)
         (and true
              (not (tr01 input0 var1 time))
              (not (tr02 input0 var1 time))
              (not (tr13 input0 var1 time))
              (not (tr12 input0 var1 time))
              (not (tr34 input0 var1 time))
              (not (tr32 input0 var1 time))
              (not (tr45 input0 var1 time))
              (not (tr42 input0 var1 time))
              (not (tr56 input0 var1 time))
              (not (tr52 input0 var1 time))
              (not (tr67 input0 var1 time))
              (not (tr78 input0 var1 time))
              (not (tr72 input0 var1 time))
              (not (tr89 input0 var1 time))
              (not (tr82 input0 var1 time))
              (not (tr910 input0 var1 time))
              (not (tr92 input0 var1 time))
              (not (tr1011 input0 var1 time))
              (not (tr102 input0 var1 time))))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (time Int))
  (! (=> (tr78 input0 var1 time)
         (and true
              (not (tr01 input0 var1 time))
              (not (tr02 input0 var1 time))
              (not (tr13 input0 var1 time))
              (not (tr12 input0 var1 time))
              (not (tr34 input0 var1 time))
              (not (tr32 input0 var1 time))
              (not (tr45 input0 var1 time))
              (not (tr42 input0 var1 time))
              (not (tr56 input0 var1 time))
              (not (tr52 input0 var1 time))
              (not (tr67 input0 var1 time))
              (not (tr62 input0 var1 time))
              (not (tr72 input0 var1 time))
              (not (tr89 input0 var1 time))
              (not (tr82 input0 var1 time))
              (not (tr910 input0 var1 time))
              (not (tr92 input0 var1 time))
              (not (tr1011 input0 var1 time))
              (not (tr102 input0 var1 time))))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (time Int))
  (! (=> (tr72 input0 var1 time)
         (and true
              (not (tr01 input0 var1 time))
              (not (tr02 input0 var1 time))
              (not (tr13 input0 var1 time))
              (not (tr12 input0 var1 time))
              (not (tr34 input0 var1 time))
              (not (tr32 input0 var1 time))
              (not (tr45 input0 var1 time))
              (not (tr42 input0 var1 time))
              (not (tr56 input0 var1 time))
              (not (tr52 input0 var1 time))
              (not (tr67 input0 var1 time))
              (not (tr62 input0 var1 time))
              (not (tr78 input0 var1 time))
              (not (tr89 input0 var1 time))
              (not (tr82 input0 var1 time))
              (not (tr910 input0 var1 time))
              (not (tr92 input0 var1 time))
              (not (tr1011 input0 var1 time))
              (not (tr102 input0 var1 time))))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (time Int))
  (! (=> (tr89 input0 var1 time)
         (and true
              (not (tr01 input0 var1 time))
              (not (tr02 input0 var1 time))
              (not (tr13 input0 var1 time))
              (not (tr12 input0 var1 time))
              (not (tr34 input0 var1 time))
              (not (tr32 input0 var1 time))
              (not (tr45 input0 var1 time))
              (not (tr42 input0 var1 time))
              (not (tr56 input0 var1 time))
              (not (tr52 input0 var1 time))
              (not (tr67 input0 var1 time))
              (not (tr62 input0 var1 time))
              (not (tr78 input0 var1 time))
              (not (tr72 input0 var1 time))
              (not (tr82 input0 var1 time))
              (not (tr910 input0 var1 time))
              (not (tr92 input0 var1 time))
              (not (tr1011 input0 var1 time))
              (not (tr102 input0 var1 time))))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (time Int))
  (! (=> (tr82 input0 var1 time)
         (and true
              (not (tr01 input0 var1 time))
              (not (tr02 input0 var1 time))
              (not (tr13 input0 var1 time))
              (not (tr12 input0 var1 time))
              (not (tr34 input0 var1 time))
              (not (tr32 input0 var1 time))
              (not (tr45 input0 var1 time))
              (not (tr42 input0 var1 time))
              (not (tr56 input0 var1 time))
              (not (tr52 input0 var1 time))
              (not (tr67 input0 var1 time))
              (not (tr62 input0 var1 time))
              (not (tr78 input0 var1 time))
              (not (tr72 input0 var1 time))
              (not (tr89 input0 var1 time))
              (not (tr910 input0 var1 time))
              (not (tr92 input0 var1 time))
              (not (tr1011 input0 var1 time))
              (not (tr102 input0 var1 time))))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (time Int))
  (! (=> (tr910 input0 var1 time)
         (and true
              (not (tr01 input0 var1 time))
              (not (tr02 input0 var1 time))
              (not (tr13 input0 var1 time))
              (not (tr12 input0 var1 time))
              (not (tr34 input0 var1 time))
              (not (tr32 input0 var1 time))
              (not (tr45 input0 var1 time))
              (not (tr42 input0 var1 time))
              (not (tr56 input0 var1 time))
              (not (tr52 input0 var1 time))
              (not (tr67 input0 var1 time))
              (not (tr62 input0 var1 time))
              (not (tr78 input0 var1 time))
              (not (tr72 input0 var1 time))
              (not (tr89 input0 var1 time))
              (not (tr82 input0 var1 time))
              (not (tr92 input0 var1 time))
              (not (tr1011 input0 var1 time))
              (not (tr102 input0 var1 time))))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (time Int))
  (! (=> (tr92 input0 var1 time)
         (and true
              (not (tr01 input0 var1 time))
              (not (tr02 input0 var1 time))
              (not (tr13 input0 var1 time))
              (not (tr12 input0 var1 time))
              (not (tr34 input0 var1 time))
              (not (tr32 input0 var1 time))
              (not (tr45 input0 var1 time))
              (not (tr42 input0 var1 time))
              (not (tr56 input0 var1 time))
              (not (tr52 input0 var1 time))
              (not (tr67 input0 var1 time))
              (not (tr62 input0 var1 time))
              (not (tr78 input0 var1 time))
              (not (tr72 input0 var1 time))
              (not (tr89 input0 var1 time))
              (not (tr82 input0 var1 time))
              (not (tr910 input0 var1 time))
              (not (tr1011 input0 var1 time))
              (not (tr102 input0 var1 time))))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (time Int))
  (! (=> (tr1011 input0 var1 time)
         (and true
              (not (tr01 input0 var1 time))
              (not (tr02 input0 var1 time))
              (not (tr13 input0 var1 time))
              (not (tr12 input0 var1 time))
              (not (tr34 input0 var1 time))
              (not (tr32 input0 var1 time))
              (not (tr45 input0 var1 time))
              (not (tr42 input0 var1 time))
              (not (tr56 input0 var1 time))
              (not (tr52 input0 var1 time))
              (not (tr67 input0 var1 time))
              (not (tr62 input0 var1 time))
              (not (tr78 input0 var1 time))
              (not (tr72 input0 var1 time))
              (not (tr89 input0 var1 time))
              (not (tr82 input0 var1 time))
              (not (tr910 input0 var1 time))
              (not (tr92 input0 var1 time))
              (not (tr102 input0 var1 time))))
     :weight 0)))
(assert (forall ((input0 Int) (var1 Int) (time Int))
  (! (=> (tr102 input0 var1 time)
         (and true
              (not (tr01 input0 var1 time))
              (not (tr02 input0 var1 time))
              (not (tr13 input0 var1 time))
              (not (tr12 input0 var1 time))
              (not (tr34 input0 var1 time))
              (not (tr32 input0 var1 time))
              (not (tr45 input0 var1 time))
              (not (tr42 input0 var1 time))
              (not (tr56 input0 var1 time))
              (not (tr52 input0 var1 time))
              (not (tr67 input0 var1 time))
              (not (tr62 input0 var1 time))
              (not (tr78 input0 var1 time))
              (not (tr72 input0 var1 time))
              (not (tr89 input0 var1 time))
              (not (tr82 input0 var1 time))
              (not (tr910 input0 var1 time))
              (not (tr92 input0 var1 time))
              (not (tr1011 input0 var1 time))))
     :weight 0)))


; reachability: sat when actually unreachable
; the "forall" over the inputs means that we're checking that
; a state is reached for any value of the inputs (which is 
; usually *not* the case)
;(assert (forall ((input0 Int) (var1 Int) (input0_p Int) (time Int))
;  (! (=> (and (tr92 input0 var1 time) (distinct input0 0)) false)
;     :weight 0)))

; comb: sat when actually unreachable
;(assert (forall ((input0 Int) (var1 Int) (input0_p Int) (time Int))
;  (! (=> (tr45 input0 var1 time) (distinct var1 3))
;     :weight 0)))

; input behavior
(assert (forall ((input0 Int) (var1 Int) (input0_p Int) (time Int))
  (! (=> (and (tr45 input0 var1 time) (= input0_p 1))  (tr52 input0_p (+ var1 1) (+ time 1)))
     :weight 0)))

(check-sat)
(get-model)
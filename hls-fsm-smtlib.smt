(set-logic HORN)
(declare-fun supp (Int Int) Bool)
(declare-fun _0 (Int Int) Bool)
(declare-fun _1 (Int Int) Bool)
(declare-fun ERR (Int Int) Bool)
(declare-fun _2 (Int Int) Bool)
(declare-fun _3 (Int Int) Bool)
(declare-fun _4 (Int Int) Bool)
(declare-fun _5 (Int Int) Bool)
(declare-fun _6 (Int Int) Bool)
(declare-fun _7 (Int Int) Bool)
(declare-fun _8 (Int Int) Bool)
(declare-fun _9 (Int Int) Bool)
(declare-fun _10 (Int Int) Bool)
(assert (forall ((var1 Int) (time Int) (input0 Int))
  (! (=> (and (supp var1 time) (= time 0)) (_0 0 0)) :weight 0)))
(assert (forall ((var1 Int) (time Int) (input0 Int))
  (! (=> (and (_0 var1 time) (distinct input0 1)) (_1 (+ var1 1) (+ time 1)))
     :weight 0)))
(assert (forall ((var1 Int) (time Int) (input0 Int))
  (! (=> (and (_0 var1 time) (= input0 1)) (ERR var1 (+ time 1))) :weight 0)))
(assert (forall ((var1 Int) (time Int) (input0 Int))
  (! (=> (and (_1 var1 time) (distinct input0 1)) (_2 (+ var1 1) (+ time 1)))
     :weight 0)))
(assert (forall ((var1 Int) (time Int) (input0 Int))
  (! (=> (and (_1 var1 time) (= input0 1)) (ERR var1 (+ time 1))) :weight 0)))
(assert (forall ((var1 Int) (time Int) (input0 Int))
  (! (=> (and (_2 var1 time) (distinct input0 1)) (_3 (+ var1 1) (+ time 1)))
     :weight 0)))
(assert (forall ((var1 Int) (time Int) (input0 Int))
  (! (=> (and (_2 var1 time) (= input0 1)) (ERR var1 (+ time 1))) :weight 0)))
(assert (forall ((var1 Int) (time Int) (input0 Int))
  (! (=> (and (_3 var1 time) (distinct input0 1)) (_4 (+ var1 1) (+ time 1)))
     :weight 0)))
(assert (forall ((var1 Int) (time Int) (input0 Int))
  (! (=> (and (_3 var1 time) (= input0 1)) (ERR var1 (+ time 1))) :weight 0)))
(assert (forall ((var1 Int) (time Int) (input0 Int))
  (! (=> (and (_4 var1 time) (distinct input0 1)) (_5 (+ var1 1) (+ time 1)))
     :weight 0)))
(assert (forall ((var1 Int) (time Int) (input0 Int))
  (! (=> (and (_4 var1 time) (= input0 1)) (ERR var1 (+ time 1))) :weight 0)))
(assert (forall ((var1 Int) (time Int) (input0 Int))
  (! (=> (and (_5 var1 time) (distinct input0 1)) (_6 (+ var1 1) (+ time 1)))
     :weight 0)))
(assert (forall ((var1 Int) (time Int) (input0 Int))
  (! (=> (and (_5 var1 time) (= input0 1)) (ERR var1 (+ time 1))) :weight 0)))
(assert (forall ((var1 Int) (time Int) (input0 Int))
  (! (=> (and (_6 var1 time) (distinct input0 1)) (_7 (+ var1 1) (+ time 1)))
     :weight 0)))
(assert (forall ((var1 Int) (time Int) (input0 Int))
  (! (=> (and (_6 var1 time) (= input0 1)) (ERR var1 (+ time 1))) :weight 0)))
(assert (forall ((var1 Int) (time Int) (input0 Int))
  (! (=> (and (_7 var1 time) (distinct input0 1)) (_8 (+ var1 1) (+ time 1)))
     :weight 0)))
(assert (forall ((var1 Int) (time Int) (input0 Int))
  (! (=> (and (_7 var1 time) (= input0 1)) (ERR var1 (+ time 1))) :weight 0)))
(assert (forall ((var1 Int) (time Int) (input0 Int))
  (! (=> (and (_8 var1 time) (distinct input0 1)) (_9 (+ var1 1) (+ time 1)))
     :weight 0)))
(assert (forall ((var1 Int) (time Int) (input0 Int))
  (! (=> (and (_8 var1 time) (= input0 1)) (ERR var1 (+ time 1))) :weight 0)))
(assert (forall ((var1 Int) (time Int) (input0 Int))
  (! (=> (and (_9 var1 time) (distinct input0 1)) (_10 (+ var1 1) (+ time 1)))
     :weight 0)))
(assert (forall ((var1 Int) (time Int) (input0 Int))
  (! (=> (and (_9 var1 time) (= input0 1)) (ERR var1 (+ time 1))) :weight 0)))
(assert (forall ((var1 Int) (time Int) (input0 Int))
  (! (=> (and (_0 var1 time) true (not (distinct input0 1)) (not (= input0 1)))
         (_0 var1 (+ time 1)))
     :weight 0)))
(assert (forall ((var1 Int) (time Int) (input0 Int))
  (! (=> (and (_1 var1 time) true (not (distinct input0 1)) (not (= input0 1)))
         (_1 var1 (+ time 1)))
     :weight 0)))
(assert (forall ((var1 Int) (time Int) (input0 Int))
  (! (=> (and (_2 var1 time) true (not (distinct input0 1)) (not (= input0 1)))
         (_2 var1 (+ time 1)))
     :weight 0)))
(assert (forall ((var1 Int) (time Int) (input0 Int))
  (! (=> (and (_3 var1 time) true (not (distinct input0 1)) (not (= input0 1)))
         (_3 var1 (+ time 1)))
     :weight 0)))
(assert (forall ((var1 Int) (time Int) (input0 Int))
  (! (=> (and (_4 var1 time) true (not (distinct input0 1)) (not (= input0 1)))
         (_4 var1 (+ time 1)))
     :weight 0)))
(assert (forall ((var1 Int) (time Int) (input0 Int))
  (! (=> (and (_5 var1 time) true (not (distinct input0 1)) (not (= input0 1)))
         (_5 var1 (+ time 1)))
     :weight 0)))
(assert (forall ((var1 Int) (time Int) (input0 Int))
  (! (=> (and (_6 var1 time) true (not (distinct input0 1)) (not (= input0 1)))
         (_6 var1 (+ time 1)))
     :weight 0)))
(assert (forall ((var1 Int) (time Int) (input0 Int))
  (! (=> (and (_7 var1 time) true (not (distinct input0 1)) (not (= input0 1)))
         (_7 var1 (+ time 1)))
     :weight 0)))
(assert (forall ((var1 Int) (time Int) (input0 Int))
  (! (=> (and (_8 var1 time) true (not (distinct input0 1)) (not (= input0 1)))
         (_8 var1 (+ time 1)))
     :weight 0)))
(assert (forall ((var1 Int) (time Int) (input0 Int))
  (! (=> (and (_9 var1 time) true (not (distinct input0 1)) (not (= input0 1)))
         (_9 var1 (+ time 1)))
     :weight 0)))
(assert (forall ((var1 Int) (time Int))
  (! (=> (supp var1 time)
         (and true
              (not (supp var1 time))
              (not (_0 var1 time))
              (not (_1 var1 time))
              (not (ERR var1 time))
              (not (_2 var1 time))
              (not (_3 var1 time))
              (not (_4 var1 time))
              (not (_5 var1 time))
              (not (_6 var1 time))
              (not (_7 var1 time))
              (not (_8 var1 time))
              (not (_9 var1 time))
              (not (_10 var1 time))))
     :weight 0)))
(assert (forall ((var1 Int) (time Int))
  (! (=> (_0 var1 time)
         (and true
              (not (supp var1 time))
              (not (_0 var1 time))
              (not (_1 var1 time))
              (not (ERR var1 time))
              (not (_2 var1 time))
              (not (_3 var1 time))
              (not (_4 var1 time))
              (not (_5 var1 time))
              (not (_6 var1 time))
              (not (_7 var1 time))
              (not (_8 var1 time))
              (not (_9 var1 time))
              (not (_10 var1 time))))
     :weight 0)))
(assert (forall ((var1 Int) (time Int))
  (! (=> (_1 var1 time)
         (and true
              (not (supp var1 time))
              (not (_0 var1 time))
              (not (_1 var1 time))
              (not (ERR var1 time))
              (not (_2 var1 time))
              (not (_3 var1 time))
              (not (_4 var1 time))
              (not (_5 var1 time))
              (not (_6 var1 time))
              (not (_7 var1 time))
              (not (_8 var1 time))
              (not (_9 var1 time))
              (not (_10 var1 time))))
     :weight 0)))
(assert (forall ((var1 Int) (time Int))
  (! (=> (ERR var1 time)
         (and true
              (not (supp var1 time))
              (not (_0 var1 time))
              (not (_1 var1 time))
              (not (ERR var1 time))
              (not (_2 var1 time))
              (not (_3 var1 time))
              (not (_4 var1 time))
              (not (_5 var1 time))
              (not (_6 var1 time))
              (not (_7 var1 time))
              (not (_8 var1 time))
              (not (_9 var1 time))
              (not (_10 var1 time))))
     :weight 0)))
(assert (forall ((var1 Int) (time Int))
  (! (=> (_2 var1 time)
         (and true
              (not (supp var1 time))
              (not (_0 var1 time))
              (not (_1 var1 time))
              (not (ERR var1 time))
              (not (_2 var1 time))
              (not (_3 var1 time))
              (not (_4 var1 time))
              (not (_5 var1 time))
              (not (_6 var1 time))
              (not (_7 var1 time))
              (not (_8 var1 time))
              (not (_9 var1 time))
              (not (_10 var1 time))))
     :weight 0)))
(assert (forall ((var1 Int) (time Int))
  (! (=> (_3 var1 time)
         (and true
              (not (supp var1 time))
              (not (_0 var1 time))
              (not (_1 var1 time))
              (not (ERR var1 time))
              (not (_2 var1 time))
              (not (_3 var1 time))
              (not (_4 var1 time))
              (not (_5 var1 time))
              (not (_6 var1 time))
              (not (_7 var1 time))
              (not (_8 var1 time))
              (not (_9 var1 time))
              (not (_10 var1 time))))
     :weight 0)))
(assert (forall ((var1 Int) (time Int))
  (! (=> (_4 var1 time)
         (and true
              (not (supp var1 time))
              (not (_0 var1 time))
              (not (_1 var1 time))
              (not (ERR var1 time))
              (not (_2 var1 time))
              (not (_3 var1 time))
              (not (_4 var1 time))
              (not (_5 var1 time))
              (not (_6 var1 time))
              (not (_7 var1 time))
              (not (_8 var1 time))
              (not (_9 var1 time))
              (not (_10 var1 time))))
     :weight 0)))
(assert (forall ((var1 Int) (time Int))
  (! (=> (_5 var1 time)
         (and true
              (not (supp var1 time))
              (not (_0 var1 time))
              (not (_1 var1 time))
              (not (ERR var1 time))
              (not (_2 var1 time))
              (not (_3 var1 time))
              (not (_4 var1 time))
              (not (_5 var1 time))
              (not (_6 var1 time))
              (not (_7 var1 time))
              (not (_8 var1 time))
              (not (_9 var1 time))
              (not (_10 var1 time))))
     :weight 0)))
(assert (forall ((var1 Int) (time Int))
  (! (=> (_6 var1 time)
         (and true
              (not (supp var1 time))
              (not (_0 var1 time))
              (not (_1 var1 time))
              (not (ERR var1 time))
              (not (_2 var1 time))
              (not (_3 var1 time))
              (not (_4 var1 time))
              (not (_5 var1 time))
              (not (_6 var1 time))
              (not (_7 var1 time))
              (not (_8 var1 time))
              (not (_9 var1 time))
              (not (_10 var1 time))))
     :weight 0)))
(assert (forall ((var1 Int) (time Int))
  (! (=> (_7 var1 time)
         (and true
              (not (supp var1 time))
              (not (_0 var1 time))
              (not (_1 var1 time))
              (not (ERR var1 time))
              (not (_2 var1 time))
              (not (_3 var1 time))
              (not (_4 var1 time))
              (not (_5 var1 time))
              (not (_6 var1 time))
              (not (_7 var1 time))
              (not (_8 var1 time))
              (not (_9 var1 time))
              (not (_10 var1 time))))
     :weight 0)))
(assert (forall ((var1 Int) (time Int))
  (! (=> (_8 var1 time)
         (and true
              (not (supp var1 time))
              (not (_0 var1 time))
              (not (_1 var1 time))
              (not (ERR var1 time))
              (not (_2 var1 time))
              (not (_3 var1 time))
              (not (_4 var1 time))
              (not (_5 var1 time))
              (not (_6 var1 time))
              (not (_7 var1 time))
              (not (_8 var1 time))
              (not (_9 var1 time))
              (not (_10 var1 time))))
     :weight 0)))
(assert (forall ((var1 Int) (time Int))
  (! (=> (_9 var1 time)
         (and true
              (not (supp var1 time))
              (not (_0 var1 time))
              (not (_1 var1 time))
              (not (ERR var1 time))
              (not (_2 var1 time))
              (not (_3 var1 time))
              (not (_4 var1 time))
              (not (_5 var1 time))
              (not (_6 var1 time))
              (not (_7 var1 time))
              (not (_8 var1 time))
              (not (_9 var1 time))
              (not (_10 var1 time))))
     :weight 0)))
(assert (forall ((var1 Int) (time Int))
  (! (=> (_10 var1 time)
         (and true
              (not (supp var1 time))
              (not (_0 var1 time))
              (not (_1 var1 time))
              (not (ERR var1 time))
              (not (_2 var1 time))
              (not (_3 var1 time))
              (not (_4 var1 time))
              (not (_5 var1 time))
              (not (_6 var1 time))
              (not (_7 var1 time))
              (not (_8 var1 time))
              (not (_9 var1 time))
              (not (_10 var1 time))))
     :weight 0)))

(check-sat)
(get-model)
